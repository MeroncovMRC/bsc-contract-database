// File: contracts/IPancakePair.sol

//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.5.0;

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// File: contracts/IUniswapV2Pair.sol


pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}
// File: contracts/IPancakeRouter02.sol



pragma solidity >=0.6.2;

interface IPancakeRouter02 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountETHDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// File: contracts/IUniswapV2Router01.sol


pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// File: contracts/IUniswapV2Router02.sol


pragma solidity >=0.6.2;


interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol


// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)
// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.

pragma solidity ^0.8.0;

/**
 * @dev Library for managing
 * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive
 * types.
 *
 * Sets have the following properties:
 *
 * - Elements are added, removed, and checked for existence in constant time
 * (O(1)).
 * - Elements are enumerated in O(n). No guarantees are made on the ordering.
 *
 * ```
 * contract Example {
 *     // Add the library methods
 *     using EnumerableSet for EnumerableSet.AddressSet;
 *
 *     // Declare a set state variable
 *     EnumerableSet.AddressSet private mySet;
 * }
 * ```
 *
 * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)
 * and `uint256` (`UintSet`) are supported.
 *
 * [WARNING]
 * ====
 * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure
 * unusable.
 * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.
 *
 * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an
 * array of EnumerableSet.
 * ====
 */
library EnumerableSet {
    // To implement this library for multiple types with as little code
    // repetition as possible, we write it in terms of a generic Set type with
    // bytes32 values.
    // The Set implementation uses private functions, and user-facing
    // implementations (such as AddressSet) are just wrappers around the
    // underlying Set.
    // This means that we can only create new EnumerableSets for types that fit
    // in bytes32.

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {
            // Equivalent to contains(set, value)
            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in
            // the array, and then remove the last element (sometimes called as 'swap and pop').
            // This modifies the order of the array, as noted in {at}.

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastValue;
                // Update the index for the moved value
                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        bytes32[] memory store = _values(set._inner);
        bytes32[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // AddressSet

    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    /**
     * @dev Returns the value stored at position `index` in the set. O(1).
     *
     * Note that there are no guarantees on the ordering of values inside the
     * array, and it may change when more values are added or removed.
     *
     * Requirements:
     *
     * - `index` must be strictly less than {length}.
     */
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    /**
     * @dev Return the entire set in an array
     *
     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed
     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that
     * this function has an unbounded cost, and using it as part of a state-changing function may render the function
     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
     */
    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        /// @solidity memory-safe-assembly
        assembly {
            result := store
        }

        return result;
    }
}

// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol


// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library AddressUpgradeable {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol


// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)

pragma solidity ^0.8.2;


/**
 * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
 * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
 * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
 * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
 *
 * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
 * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
 * case an upgrade adds a module that needs to be initialized.
 *
 * For example:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * contract MyToken is ERC20Upgradeable {
 *     function initialize() initializer public {
 *         __ERC20_init("MyToken", "MTK");
 *     }
 * }
 * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
 *     function initializeV2() reinitializer(2) public {
 *         __ERC20Permit_init("MyToken");
 *     }
 * }
 * ```
 *
 * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
 * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
 *
 * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
 * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
 *
 * [CAUTION]
 * ====
 * Avoid leaving a contract uninitialized.
 *
 * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
 * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
 * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
 *
 * [.hljs-theme-light.nopadding]
 * ```
 * /// @custom:oz-upgrades-unsafe-allow constructor
 * constructor() {
 *     _disableInitializers();
 * }
 * ```
 * ====
 */
abstract contract Initializable {
    /**
     * @dev Indicates that the contract has been initialized.
     * @custom:oz-retyped-from bool
     */
    uint8 private _initialized;

    /**
     * @dev Indicates that the contract is in the process of being initialized.
     */
    bool private _initializing;

    /**
     * @dev Triggered when the contract has been initialized or reinitialized.
     */
    event Initialized(uint8 version);

    /**
     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
     * `onlyInitializing` functions can be used to initialize parent contracts.
     *
     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a
     * constructor.
     *
     * Emits an {Initialized} event.
     */
    modifier initializer() {
        bool isTopLevelCall = !_initializing;
        require(
            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),
            "Initializable: contract is already initialized"
        );
        _initialized = 1;
        if (isTopLevelCall) {
            _initializing = true;
        }
        _;
        if (isTopLevelCall) {
            _initializing = false;
            emit Initialized(1);
        }
    }

    /**
     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
     * used to initialize parent contracts.
     *
     * A reinitializer may be used after the original initialization step. This is essential to configure modules that
     * are added through upgrades and that require initialization.
     *
     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
     * cannot be nested. If one is invoked in the context of another, execution will revert.
     *
     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
     * a contract, executing them in the right order is up to the developer or operator.
     *
     * WARNING: setting the version to 255 will prevent any future reinitialization.
     *
     * Emits an {Initialized} event.
     */
    modifier reinitializer(uint8 version) {
        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");
        _initialized = version;
        _initializing = true;
        _;
        _initializing = false;
        emit Initialized(version);
    }

    /**
     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
     * {initializer} and {reinitializer} modifiers, directly or indirectly.
     */
    modifier onlyInitializing() {
        require(_initializing, "Initializable: contract is not initializing");
        _;
    }

    /**
     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     * through proxies.
     *
     * Emits an {Initialized} event the first time it is successfully executed.
     */
    function _disableInitializers() internal virtual {
        require(!_initializing, "Initializable: contract is initializing");
        if (_initialized < type(uint8).max) {
            _initialized = type(uint8).max;
            emit Initialized(type(uint8).max);
        }
    }

    /**
     * @dev Returns the highest version that has been initialized. See {reinitializer}.
     */
    function _getInitializedVersion() internal view returns (uint8) {
        return _initialized;
    }

    /**
     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
     */
    function _isInitializing() internal view returns (bool) {
        return _initializing;
    }
}

// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;


/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal onlyInitializing {
    }

    function __Context_init_unchained() internal onlyInitializing {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[50] private __gap;
}

// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;



/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    function __Ownable_init() internal onlyInitializing {
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal onlyInitializing {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[49] private __gap;
}

// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

// File: @openzeppelin/contracts/utils/introspection/IERC165.sol


// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin/contracts/token/ERC721/IERC721.sol


// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;


/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol


// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// File: contracts/CommunityGaming.sol



pragma solidity ^0.8.0;




interface ICommunityGaming {
    function setTokenAddress(address _token) external;
    function deposit(uint256 _amount) external;
    function withdraw(uint256 _amount) external;
    function transfer(address _recipient, uint256 _amount) external;
    function approve(address _spender, uint256 _amount) external;
    function transferFrom(address _sender, address _recipient, uint256 _amount) external;
    function setReferralRewardPercentage(uint256 _rewardPercentage) external;
    function refer(address _referee) external;
    function formTeam(address[] calldata _teamMembers) external;
    function requestJoinTeam(address _team) external;
    function acceptTeamRequest(address _player) external;
    function getTeamMembers(address _team) external view returns (address[] memory);
    function getTeamRequests(address _team) external view returns (address[] memory);
    function registerTournament(uint256 _registrationFee, uint256 _deadline) external;
    function sponsorTournament(uint256 _tournamentId, uint256 _amount) external;
    function participateInTournament(uint256 _tournamentId) external;
    function startTournament(uint256 _tournamentId) external;
    function endTournament(uint256 _tournamentId, address _winner) external;
}

contract CommunityGaming {
    using SafeERC20 for IERC20;
    using EnumerableSet for EnumerableSet.AddressSet;
    uint256 public tokenAmount;
    uint256 public teamSizeLimit = 5;
    CommunityGaming public communityGaming;
    address private _shitpostCatsToken;
    address private _communityGamingContractAddress;
    address public governanceAddress;
    address public admin;
    IERC20 public token;
    address public nftAddress;
    uint256 public referralRewardPercentage;
    
    uint256 public nextTournamentId;
    uint256 public minParticipants = 2;
    uint256 public maxParticipants = 100;

    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowances;
    mapping(address => EnumerableSet.AddressSet) private teams;
    mapping(address => EnumerableSet.AddressSet) private teamRequests;
    mapping(address => address) public referrals;
    mapping(address => PlayerProfile) public playerProfiles;
    mapping(uint256 => Tournament) public tournaments;

    event Deposit(address indexed depositor, uint256 amount);
    event Withdraw(address indexed withdrawer, uint256 amount);
    event Transfer(address indexed sender, address indexed recipient, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
    event ReferralReward(address indexed referrer, address indexed referee, uint256 amount);
    event TeamFormed(address indexed player, address indexed teammate);
    event TeamRequest(address indexed player, address indexed team);
    event TeamAcceptance(address indexed player, address indexed team);
    event TournamentRegistered(uint256 tournamentId, uint256 registrationFee, uint256 deadline);
    event TournamentStarted(uint256 tournamentId);
    event TournamentEnded(uint256 tournamentId, address winner);
    event Sponsorship(address indexed sponsor, uint256 indexed tournamentId, uint256 amount);

    struct PlayerProfile {
        uint256 tournamentsPlayed;
        uint256 tournamentsWon;
        uint256 referralRewards;
    }

    struct Tournament {
        uint256 id;
        address sponsor;
        uint256 registrationFee;
        uint256 prizePool;
        uint256 deadline;
        uint256 minParticipants;
        uint256 maxParticipants;
        uint256 numParticipants;
        address[] participants;
        TournamentStage stage;
    }

    enum TournamentStage {
        Registration,
        Ongoing,
        Ended
    }
    
    
address private _communityGamingAddress;
constructor(address _token, address _cgContractAddress) {
    admin = msg.sender;
    token = IERC20(_token);
    referralRewardPercentage = 5;
    communityGaming = CommunityGaming(_cgContractAddress);
}




    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    function setTokenAddress(address _token) external onlyAdmin {
    token = IERC20(_token);
}


    function deposit(uint256 _amount) external {
        token.safeTransferFrom(msg.sender, address(this), _amount);
        balances[msg.sender] += _amount;
        emit Deposit(msg.sender, _amount);
    }

    function withdraw(uint256 _amount) external {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        balances[msg.sender] -= _amount;
        token.safeTransfer(msg.sender, _amount);
        emit Withdraw(msg.sender, _amount);
    }

    function transfer(address _recipient, uint256 _amount) external {
    require(balances[msg.sender] >= _amount, "Insufficient balance");
    balances[msg.sender] -= _amount;
    balances[_recipient] += _amount;
    token.safeTransfer(_recipient, _amount);
    emit Transfer(msg.sender, _recipient, _amount);
}

function approve(address _spender, uint256 _amount) external {
    allowances[msg.sender][_spender] = _amount;
    token.safeApprove(_spender, _amount);
    emit Approval(msg.sender, _spender, _amount);
}

function transferFrom(address _sender, address _recipient, uint256 _amount) external {
    require(allowances[_sender][msg.sender] >= _amount, "Insufficient allowance");
    allowances[_sender][msg.sender] -= _amount;
    balances[_sender] -= _amount;
    balances[_recipient] += _amount;
    token.safeTransferFrom(_sender, _recipient, _amount);
    emit Transfer(_sender, _recipient, _amount);
}


function setReferralRewardPercentage(uint256 _rewardPercentage) external onlyAdmin {
    referralRewardPercentage = _rewardPercentage;
}

function refer(address _referee) external {
    require(_referee != msg.sender, "Cannot refer yourself");
    require(referrals[_referee] == address(0), "Referral already exists");
    referrals[_referee] = msg.sender;
    uint256 rewardAmount = balances[_referee] * referralRewardPercentage / 100;
    balances[msg.sender] += rewardAmount;
    emit ReferralReward(msg.sender, _referee, rewardAmount);
}

function formTeam(address[] calldata _teamMembers) external {
    require(_teamMembers.length > 1, "At least two members are required");
    for (uint256 i = 0; i < _teamMembers.length; i++) {
        require(_teamMembers[i] != address(0), "Invalid address");
        require(_teamMembers[i] != msg.sender, "Cannot form a team with yourself");
        require(!teams[msg.sender].contains(_teamMembers[i]), "Already part of the team");
        teams[msg.sender].add(_teamMembers[i]);
        emit TeamFormed(msg.sender, _teamMembers[i]);
    }
}

function requestJoinTeam(address _team) external {
    require(!teams[_team].contains(msg.sender), "Already part of the team");
    teamRequests[_team].add(msg.sender);
    emit TeamRequest(msg.sender, _team);
}

function acceptTeamRequest(address _player) external {
    require(teamRequests[msg.sender].contains(_player), "No request from the player");
    teamRequests[msg.sender].remove(_player);
    teams[msg.sender].add(_player);
    emit TeamAcceptance(_player, msg.sender);
}

function getTeamMembers(address _team) external view returns (address[] memory) {
    uint256 length = teams[_team].length();
    address[] memory members = new address[](length);
    for (uint256 i = 0; i < length; i++) {
        members[i] = teams[_team].at(i);
    }
    return members;
}

function getTeamRequests(address _team) external view returns (address[] memory) {
    uint256 length = teamRequests[_team].length();
    address[] memory requests = new address[](length);
    for (uint256 i = 0; i < length; i++) {
        requests[i] = teamRequests[_team].at(i);
    }
    return requests;
}

function registerTournament(uint256 _registrationFee, uint256 _deadline) external {
    uint256 tournamentId = nextTournamentId;
    nextTournamentId++;

    tournaments[tournamentId] = Tournament({
        id: tournamentId,
        sponsor: msg.sender,
        registrationFee: _registrationFee,
        prizePool: 0,
        deadline: _deadline,
        minParticipants: minParticipants,
        maxParticipants: maxParticipants,
        numParticipants: 0,
        participants: new address[](0),
        stage: TournamentStage.Registration
    });

    emit TournamentRegistered(tournamentId, _registrationFee, _deadline);
}
function sponsorTournament(uint256 _tournamentId, uint256 _amount) external {
    require(tournaments[_tournamentId].stage == TournamentStage.Registration, "Tournament not in registration stage");
    require(balances[msg.sender] >= _amount, "Insufficient balance");
    
    balances[msg.sender] -= _amount;
    tournaments[_tournamentId].prizePool += _amount;

    emit Sponsorship(msg.sender, _tournamentId, _amount);
}

function participateInTournament(uint256 _tournamentId) external {
    Tournament storage tournament = tournaments[_tournamentId];

    require(tournament.stage == TournamentStage.Registration, "Tournament not in registration stage");
    require(balances[msg.sender] >= tournament.registrationFee, "Insufficient balance");
    require(tournament.numParticipants < tournament.maxParticipants, "Tournament is full");

    balances[msg.sender] -= tournament.registrationFee;
    tournament.prizePool += tournament.registrationFee;
    tournament.numParticipants++;
    tournament.participants.push(msg.sender);

    playerProfiles[msg.sender].tournamentsPlayed++;
}

function startTournament(uint256 _tournamentId) external onlyAdmin {
    Tournament storage tournament = tournaments[_tournamentId];

    require(tournament.stage == TournamentStage.Registration, "Tournament not in registration stage");
    require(tournament.numParticipants >= tournament.minParticipants, "Not enough participants");

    tournament.stage = TournamentStage.Ongoing;

    emit TournamentStarted(_tournamentId);
}

function endTournament(uint256 _tournamentId, address _winner) external onlyAdmin {
    Tournament storage tournament = tournaments[_tournamentId];

    require(tournament.stage == TournamentStage.Ongoing, "Tournament not ongoing");

    tournament.stage = TournamentStage.Ended;

    balances[_winner] += tournament.prizePool;
    playerProfiles[_winner].tournamentsWon++;

    emit TournamentEnded(_tournamentId, _winner);
}
}
// File: @openzeppelin/contracts/utils/math/SafeMath.sol


// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: contracts/FeeAndAntiRugContract.sol


pragma solidity >=0.6.0 <0.9.0;





interface IFeeAndAntiRugContract {
    function setGovernanceAddress(address _governanceContract) external;
    function setTokenAddress(address _tokenAddress) external;
    function setFeeAndRugParams(uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _feeDenominator) external;
    function transfer(address _recipient, uint256 _amount) external returns (bool);
    function setMaxWallet(uint256 _maxWallet) external;
    function setMaxTxAmount(uint256 _maxTxAmount) external;
    function addWhitelisted(address _address) external;
    function removeWhitelisted(address _address) external;
    function addBlacklist(address _address) external;
    function removeBlacklist(address _address) external;
    function airdrop(address[] calldata recipients, uint256[] calldata amounts) external;
}

contract FeeAndAntiRugContract is OwnableUpgradeable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20Metadata;

    address public governance;
    IERC20Metadata public token;
    address public tokenAddress;
    address public rewards;
    uint256 public liquidity;
    uint256 public reflection;
    uint256 public marketing;
    uint256 public denominator;

    uint256 public maxWallet = 2 * 10 ** 12;
    uint256 public maxTransaction = 1 * 10 ** 12;

    mapping(address => uint256) public balances;
    mapping(address => bool) public whitelisted;
    mapping(address => bool) public blacklisted;

    uint256 public lotteryPool;
    uint256 public nextLottery;
    uint256 public constant LOTTERY_INTERVAL = 1 weeks;
    uint256 public constant LOTTERY_TIME = 1681090800;

    event TokenTransfer(address indexed sender, address indexed receiver, uint256 amount);
    event TokenBurn(address indexed sender, uint256 amount);
    event LiquidityProvided(address indexed sender, uint256 amount);
    event RewardProvided(address indexed sender, uint256 amount);
    event LotteryFunded(address indexed sender, uint256 amount);
    event LotteryDrawn(uint256 amount, uint256 nextDrawTime);
    event AirdropCompleted(address indexed receiver, uint256 amount);

    function initialize(IERC20Metadata _token, address _rewards, uint256 _liquidity, uint256 _reflection, uint256 _marketing, uint256 _denominator) public initializer {
        token = _token;
        rewards = _rewards;
        whitelisted[msg.sender] = true;
        whitelisted[address(this)] = true;
        nextLottery = LOTTERY_TIME;
        setParameters(_liquidity, _reflection, _marketing, _denominator);
    }

    function setGovernance(address _governance) external onlyOwner {
        require(msg.sender == governance, "Only the governance contract can call this function");
        governance = _governance;
    }

    function setToken(address _tokenAddress) external {
        tokenAddress = _tokenAddress;
    }

    function setParameters(uint256 _liquidity, uint256 _reflection, uint256 _marketing, uint256 _denominator) public onlyOwner {
require(_liquidity.add(_reflection).add(_marketing) <= _denominator, "Invalid fee parameters");
liquidity = _liquidity;
reflection = _reflection;
marketing = _marketing;
denominator = _denominator;
}
function transferTo(address _receiver, uint256 _amount) public returns (bool) {
    require(!blacklisted[msg.sender] && !blacklisted[_receiver], "Address is blacklisted");
    require(balances[msg.sender] >= _amount, "Insufficient balance");

    if (!whitelisted[msg.sender] && !whitelisted[_receiver]) {
        require(_amount <= maxTransaction, "Transaction amount exceeds max limit");
        require(balances[_receiver].add(_amount) <= maxWallet, "Wallet balance exceeds max limit");
    }

    uint256 burnAmount = _amount.mul(liquidity).div(denominator);
    uint256 liquidityAmount = _amount.mul(reflection).div(denominator);
    uint256 reflectionAmount = _amount.mul(marketing).div(denominator);
    uint256 marketingAmount = _amount.mul(marketing).div(denominator);
    _amount = _amount.sub(burnAmount).sub(liquidityAmount).sub(reflectionAmount).sub(marketingAmount);
    uint256 lotteryAmount = _amount.mul(liquidity).div(denominator);

    if (burnAmount > 0) {
        token.safeTransfer(address(0), burnAmount);
        emit TokenBurn(msg.sender, burnAmount);
    }

    if (liquidityAmount > 0) {
        token.safeTransfer(address(this), liquidityAmount);
        emit LiquidityProvided(msg.sender, liquidityAmount);
    }

    if (reflectionAmount > 0) {
        balances[address(this)] = balances[address(this)].add(reflectionAmount);
        emit TokenTransfer(msg.sender, address(this), reflectionAmount);
    }

    if (marketingAmount > 0) {
        token.safeTransfer(rewards, marketingAmount);
        emit RewardProvided(msg.sender, marketingAmount);
    }

    if (lotteryAmount > 0) {
        lotteryPool = lotteryPool.add(lotteryAmount);
        emit LotteryFunded(msg.sender, lotteryAmount);
    }
    emit TokenTransfer(msg.sender, _receiver, _amount);

    // Automatically draw lottery every Saturday at 3:00 PM
    if (block.timestamp >= nextLottery && lotteryPool > 0) {
        uint256 winningAmount = lotteryPool;
        lotteryPool = 0;
        nextLottery = nextLottery.add(LOTTERY_INTERVAL);
        emit LotteryDrawn(winningAmount, nextLottery);
        token.safeTransfer(msg.sender, winningAmount);
    }

    return true;
}

function setMaxWallet(uint256 _maxWallet) external onlyOwner {
    maxWallet = _maxWallet;
}

function setMaxTransaction(uint256 _maxTransaction) external onlyOwner {
    maxTransaction = _maxTransaction;
}

function addToWhitelist(address _address) external onlyOwner {
    whitelisted[_address] = true;
}

function removeFromWhitelist(address _address) external onlyOwner {
    whitelisted[_address] = false;
}

function addToBlacklist(address _address) external onlyOwner {
    blacklisted[_address] = true;
}

function removeFromBlacklist(address _address) external onlyOwner {
    blacklisted[_address] = false;
}

function distributeAirdrop(address[] calldata recipients, uint256[] calldata amounts) external onlyOwner {
    require(recipients.length == amounts.length, "Mismatched array lengths");

    for (uint256 i = 0; i < recipients.length; i++) {
        address recipient = recipients[i];
        uint256 amount = amounts[i];
        require(recipient != address(0), "Invalid recipient address");
        require(amount > 0, "Invalid amount");

        // check if the contract has enough balance to distribute
        require(token.balanceOf(address(this)) >= amount, "Insufficient balance");

        // transfer tokens to the recipient
        token.safeTransfer(recipient, amount);
        emit AirdropCompleted(recipient, amount);
    }
}


function withdrawTokens(IERC20Metadata _token, uint256 _amount) external onlyOwner {
require(_token != token, "Cannot withdraw project token");
_token.safeTransfer(msg.sender, _amount);
}

function withdrawBNB(uint256 _amount) external onlyOwner {
(bool success, ) = msg.sender.call{value: _amount}("");
require(success, "Failed to withdraw BNB");
}

receive() external payable {}
}
// File: contracts/StakingContract.sol


pragma solidity ^0.8.0;



interface IStakingContract {
function setGovernanceContractAddress(address _governanceContract) external;
function setGovernanceAddress(address _governance) external;
function stake(uint256 _amount) external;
function setTokenAddress(address _tokenAddress) external;
function withdraw(uint256 _amount) external;
function claimRewards() external;
function unstake() external;
function calculateRewards(address _staker) external view returns (uint256);
function updateRewards() external;
function getStakingInfo(address _staker) external view returns (uint256, uint256, uint256);
}
interface IMainContract {
    function onTokensStaked(address user, uint256 amount) external;
    function onTokensUnstaked(address user, uint256 amount) external;
    function onTokensWithdrawn(address user, uint256 amount) external;
    function onRewardsClaimed(address user, uint256 amount) external;
}

contract StakingContract is IStakingContract {
using SafeMath for uint256;
struct Stake {
    uint256 amount;
    uint256 lastUpdateBlock;
    uint256 totalRewards;
}

uint256 public totalStaked;
uint256 public rewardRate;
uint256 public lastUpdateBlock;
uint256 public totalRewards;
mapping(address => Stake) public stakes;

address public tokenAddress;
address public governance;
address public governanceContract;
address public masterContractAddress;
IMainContract private masterContract;

StakingContract private stakingContractInstance;
IERC20 private token;    

modifier onlyGovernance {
    require(msg.sender == governance, "Only governance can perform this action");
    _;
}

modifier onlyStaker {
    require(stakes[msg.sender].amount > 0, "No balance to withdraw or claim");
    _;
}

event Staked(address indexed staker, uint256 amount);
event Withdrawn(address indexed staker, uint256 amount);
event RewardsClaimed(address indexed staker, uint256 amount);
event Unstaked(address indexed staker, uint256 amount);

constructor(address _governanceContract) {
        governanceContract = _governanceContract;
    }

function setMasterContractAddress(address _masterContractAddress) external onlyGovernance {
    require(masterContractAddress == address(0), "Master Contract address has already been set");
    masterContractAddress = _masterContractAddress;
    masterContract = IMainContract(_masterContractAddress);
}


function setGovernanceContractAddress(address _governanceContract) external override {
    require(governanceContract == address(0), "Governance contract address has already been set");
    governanceContract = _governanceContract;
}

    
function setGovernanceAddress(address _governance) public override onlyGovernance {
    governance = _governance;
}

function stake(uint256 _amount) public override {
        require(_amount > 0, "Amount must be greater than 0");

        // Transfer tokens from the staker's address to the staking contract
        token.transferFrom(msg.sender, address(this), _amount);
        

    // Notify the master contract
    masterContract.onTokensStaked(msg.sender, _amount);
    Stake storage userStake = stakes[msg.sender];
    uint256 rewards = calculateRewards(msg.sender);

    if (userStake.amount > 0) {
        userStake.totalRewards = userStake.totalRewards.add(rewards);
        totalRewards = totalRewards.add(rewards);
    }

    userStake.amount = userStake.amount.add(_amount);
    userStake.lastUpdateBlock = block.number;
    totalStaked = totalStaked.add(_amount);

    emit Staked(msg.sender, _amount);
}

function setTokenAddress(address _tokenAddress) external override onlyGovernance {
        tokenAddress = _tokenAddress;
        token = IERC20(_tokenAddress);
    }



function withdraw(uint256 _amount) public override onlyStaker {
    Stake storage userStake = stakes[msg.sender];

    require(userStake.amount >= _amount, "Insufficient balance");
    emit Withdrawn(msg.sender, _amount);

    // Notify the master contract
    masterContract.onTokensWithdrawn(msg.sender, _amount);
    uint256 rewards = calculateRewards(msg.sender);

    if (rewards > 0) {
        userStake.totalRewards = userStake.totalRewards.add(rewards);
        totalRewards = totalRewards.add(rewards);

        // Transfer rewards to the staker's address
        emit RewardsClaimed(msg.sender, rewards);
        token.transfer(msg.sender, rewards);
    }

    userStake.amount = userStake.amount.sub(_amount);
    userStake.lastUpdateBlock = block.number;
    totalStaked = totalStaked.sub(_amount);

    // Transfer tokens to the staker's address
    token.transfer(msg.sender, _amount);
}


function claimRewards() public override onlyStaker {
    Stake storage userStake = stakes[msg.sender];
    uint256 rewards = calculateRewards(msg.sender);
    
    token.transfer(msg.sender, rewards);


    // Notify the master contract
    masterContract.onRewardsClaimed(msg.sender, rewards);
    // Transfer rewards to the staker's address
        token.transfer(msg.sender, rewards);
    require(rewards > 0, "No rewards to claim");

    userStake.totalRewards = userStake.totalRewards.add(rewards);
    totalRewards = totalRewards.add(rewards);
    // Transfer rewards to the staker's address


    emit RewardsClaimed(msg.sender, rewards);
    token.transfer(msg.sender, rewards);

}

function unstake() public override onlyStaker {
    Stake storage userStake = stakes[msg.sender];
    uint256 amountToWithdraw = userStake.amount;
emit Unstaked(msg.sender, amountToWithdraw);

    // Notify the master contract
    masterContract.onTokensUnstaked(msg.sender, amountToWithdraw);
    require(amountToWithdraw > 0, "No balance to unstake");

// Transfer tokens from the staking contract to the staker's address
        token.transfer(msg.sender, amountToWithdraw);

    uint256 rewards = calculateRewards(msg.sender);

    if (rewards > 0) {
        userStake.totalRewards = userStake.totalRewards.add(rewards);
        totalRewards = totalRewards.add(rewards);
        // Transfer rewards to the staker's address
      
        emit RewardsClaimed(msg.sender, rewards);
        token.transfer(msg.sender, rewards);

    }

    userStake.amount = 0;
    userStake.totalRewards = 0;
    userStake.lastUpdateBlock = block.number;
    totalStaked = totalStaked.sub(amountToWithdraw);

    // Transfer tokens to the staker's address
 
    emit Unstaked(msg.sender, amountToWithdraw);
}

function calculateRewards(address _staker) public view returns (uint256) {
    Stake storage userStake = stakes[_staker];

    if (userStake.amount == 0) {
    return 0;
}


    uint256 blocksElapsed = block.number.sub(userStake.lastUpdateBlock);

    if (blocksElapsed == 0) {
        return 0;
    }

    return userStake.amount.mul(blocksElapsed).mul(rewardRate);
}

function updateRewards() public {
    uint256 blocksElapsed = block.number.sub(lastUpdateBlock);
    if (blocksElapsed == 0) {
        return;
    }

    totalRewards = totalRewards.add(totalStaked.mul(blocksElapsed).mul(rewardRate));
    lastUpdateBlock = block.number;
}

function getStakingInfo(address _staker) public view returns (
    uint256 amount,
    uint256 rewardsEarned,
    uint256 rewardsPending
) {
    Stake storage userStake = stakes[_staker];
    uint256 rewards = calculateRewards(_staker);

    // Get the staker's current stake amount
    amount = userStake.amount;

    // Calculate the staker's total rewards, which includes both claimed and pending rewards
    rewardsEarned = userStake.totalRewards.add(rewards);

    // Calculate the staker's pending rewards (i.e. rewards that haven't been claimed yet)
    rewardsPending = rewards;
}
}
// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/token/ERC20/ERC20.sol


// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;




/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol


// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)

pragma solidity ^0.8.0;



/**
 * @dev Extension of {ERC20} that allows token holders to destroy both their own
 * tokens and those that they have an allowance for, in a way that can be
 * recognized off-chain (via event analysis).
 */
abstract contract ERC20Burnable is Context, ERC20 {
    /**
     * @dev Destroys `amount` tokens from the caller.
     *
     * See {ERC20-_burn}.
     */
    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, deducting from the caller's
     * allowance.
     *
     * See {ERC20-_burn} and {ERC20-allowance}.
     *
     * Requirements:
     *
     * - the caller must have allowance for ``accounts``'s tokens of at least
     * `amount`.
     */
    function burnFrom(address account, uint256 amount) public virtual {
        _spendAllowance(account, _msgSender(), amount);
        _burn(account, amount);
    }
}

// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)

pragma solidity ^0.8.0;


/**
 * @dev Extension of {ERC20} that adds a cap to the supply of tokens.
 */
abstract contract ERC20Capped is ERC20 {
    uint256 private immutable _cap;

    /**
     * @dev Sets the value of the `cap`. This value is immutable, it can only be
     * set once during construction.
     */
    constructor(uint256 cap_) {
        require(cap_ > 0, "ERC20Capped: cap is 0");
        _cap = cap_;
    }

    /**
     * @dev Returns the cap on the token's total supply.
     */
    function cap() public view virtual returns (uint256) {
        return _cap;
    }

    /**
     * @dev See {ERC20-_mint}.
     */
    function _mint(address account, uint256 amount) internal virtual override {
        require(ERC20.totalSupply() + amount <= cap(), "ERC20Capped: cap exceeded");
        super._mint(account, amount);
    }
}

// File: @openzeppelin/contracts/security/Pausable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/DexContract.sol



pragma solidity ^0.8.0;









interface IDexContract {
    function setLiquidityPool(address _liquidityPool) external;
    function setUniswapPair(IUniswapV2Pair _uniswapPair) external;
    function setPancakePair(IPancakePair _pancakePair) external;
    function swapOnUniswap(uint256 _amountIn, uint256 _amountOutMin) external;
    function swapOnPancakeSwap(uint256 _amountIn, uint256 _amountOutMin) external;
    function addLiquidityUniswap(uint256 tokenAmount, uint256 ethAmount, uint256 tokenMin, uint256 ethMin) external payable;
    function addLiquidityPancakeSwap(uint256 tokenAmount, uint256 bnbAmount, uint256 tokenMin, uint256 bnbMin) external payable;
    function removeLiquidityUniswap(uint256 liquidity, uint256 tokenMin, uint256 ethMin) external;
    function removeLiquidityPancakeSwap(uint256 liquidity, uint256 tokenMin, uint256 bnbMin) external;
    function getTokenPriceUniswap() external view returns (uint256);
    function getTokenPricePancakeSwap() external view returns (uint256);
    event LiquidityPoolSet(address indexed liquidityPool);
    event UniswapPairSet(IUniswapV2Pair indexed uniswapPair);
    event PancakePairSet(IPancakePair indexed pancakePair);
    event SwapOnUniswap(address indexed user, uint256 amountIn, uint256 amountOut);
    event SwapOnPancakeSwap(address indexed user, uint256 amountIn, uint256 amountOut);
    event AddLiquidityUniswap(address indexed user, uint256 tokenAmount, uint256 ethAmount);
    event AddLiquidityPancakeSwap(address indexed user, uint256 tokenAmount, uint256 bnbAmount);
event RemoveLiquidityUniswap(address indexed user, uint256 liquidity);
event RemoveLiquidityPancakeSwap(address indexed user, uint256 liquidity);

}

contract DexContract is Ownable, IDexContract {
using SafeERC20 for IERC20Metadata;
using SafeMath for uint256;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);


IERC20Metadata public token;
IUniswapV2Router02 public uniswapRouter;
IPancakeRouter02 public pancakeRouter;
IUniswapV2Pair public uniswapPair;
IPancakePair public pancakePair;
address public liquidityPool;
mapping (address => uint256) private _balances;
mapping (address => mapping (address => uint256)) private _allowances;
uint256 private _totalSupply;


constructor(IERC20Metadata _token, IUniswapV2Router02 _uniswapRouter, IPancakeRouter02 _pancakeRouter) {
    token = _token;
    uniswapRouter = _uniswapRouter;
    pancakeRouter = _pancakeRouter;
}

function setLiquidityPool(address _liquidityPool) external override onlyOwner {
    require(_liquidityPool != address(0), "Invalid liquidity pool address");
    liquidityPool = _liquidityPool;
    emit LiquidityPoolSet(_liquidityPool);
}

function setUniswapPair(IUniswapV2Pair _uniswapPair) external override onlyOwner {
    uniswapPair = _uniswapPair;
    emit UniswapPairSet(_uniswapPair);
}

function setPancakePair(IPancakePair _pancakePair) external override onlyOwner {
    pancakePair = _pancakePair;
    emit PancakePairSet(_pancakePair);
}

function swapOnUniswap(uint256 _amountIn, uint256 _amountOutMin) external override {
    token.safeTransferFrom(msg.sender, address(this), _amountIn);
    address[] memory path = new address[](2);
    path[0] = address(token);
    path[1] = uniswapRouter.WETH();
    uint256[] memory amounts = uniswapRouter.swapExactTokensForETH(
        _amountIn,
        _amountOutMin,
        path,
        msg.sender,
        block.timestamp + 300 // Added 5 minutes deadline to prevent front-running attacks
    );
    emit SwapOnUniswap(msg.sender, _amountIn, amounts[1]);
}

function swapOnPancakeSwap(uint256 _amountIn, uint256 _amountOutMin) external override {
    token.safeTransferFrom(msg.sender, address(this), _amountIn);
    address[] memory path = new address[](2);
    path[0] = address(token);
    path[1] = pancakeRouter.WETH();
uint256[] memory amounts = pancakeRouter.swapExactTokensForETH(
_amountIn,
_amountOutMin,
path,
msg.sender,
block.timestamp + 300 // Added 5 minutes deadline to prevent front-running attacks
);
emit SwapOnPancakeSwap(msg.sender, _amountIn, amounts[1]);
}

function addLiquidityUniswap(uint256 tokenAmount, uint256 ethAmount, uint256 tokenMin, uint256 ethMin) external payable override {
require(msg.value == ethAmount, "Invalid ETH amount");
token.safeTransferFrom(msg.sender, address(this), tokenAmount);
token.approve(address(uniswapRouter), tokenAmount);
uniswapRouter.addLiquidityETH{value: ethAmount}(
address(token),
tokenAmount,
tokenMin,
ethMin,
msg.sender,
block.timestamp + 300 // Added 5 minutes deadline to prevent front-running attacks
);
emit AddLiquidityUniswap(msg.sender, tokenAmount, ethAmount);
}

function addLiquidityPancakeSwap(uint256 tokenAmount, uint256 bnbAmount, uint256 tokenMin, uint256 bnbMin) external payable override {
    require(msg.value == bnbAmount, "Invalid BNB amount");
    token.safeTransferFrom(msg.sender, address(this), tokenAmount);
    token.approve(address(pancakeRouter), tokenAmount);
    pancakeRouter.addLiquidityETH{value: bnbAmount}(
        address(token),
        tokenAmount,
        bnbAmount,
        tokenMin,
        bnbMin,
        msg.sender,
        block.timestamp + 300 // Added 5 minutes deadline to prevent front-running attacks
    );
    emit AddLiquidityPancakeSwap(msg.sender, tokenAmount, bnbAmount);
}


function removeLiquidityUniswap(uint256 liquidity, uint256 tokenMin, uint256 ethMin) external override {
uniswapPair.approve(address(uniswapRouter), liquidity);
/*(uint256 amountToken, uint256 amountETH) =*/ uniswapRouter.removeLiquidityETH(
address(token),
liquidity,
tokenMin,
ethMin,
msg.sender,
block.timestamp + 300 // Added 5 minutes deadline to prevent front-running attacks
);
emit RemoveLiquidityUniswap(msg.sender, liquidity);
}

function removeLiquidityPancakeSwap(uint256 liquidity, uint256 tokenMin, uint256 bnbMin) external override {
pancakePair.approve(address(pancakeRouter), liquidity);
/*(uint256 amountToken, uint256 amountBNB) =*/ pancakeRouter.removeLiquidityETH(
address(token),
liquidity,
tokenMin,
bnbMin,
msg.sender,
block.timestamp + 300 // Added 5 minutes deadline to prevent front-running attacks
);
emit RemoveLiquidityPancakeSwap(msg.sender, liquidity);
}

function getTokenPriceUniswap() external view override returns (uint256) {
(uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();
return reserve1.mul(1e18).div(reserve0);
}

function getTokenPricePancakeSwap() external view override returns (uint256) {
(uint256 reserve0, uint256 reserve1, ) = pancakePair.getReserves();
return reserve1.mul(1e18).div(reserve0);
}

function _beforeTokenTransfer(address from, address to, uint256 amount) internal {
    require(from != address(0), "ERC20: transfer from the zero address");
    require(to != address(0), "ERC20: transfer to the zero address");
    _balances[from] = _balances[from].sub(amount, "ERC20: transfer amount exceeds balance");
    _balances[to] = _balances[to].add(amount);
    emit Transfer(from, to, amount);

}


function transfer(address recipient, uint256 amount) public returns (bool) {
    _beforeTokenTransfer(msg.sender, recipient, amount);
    return true;
}


function approve(address spender, uint256 amount) public returns (bool) {
    _approve(msg.sender, spender, amount);
    return true;
}


function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
_beforeTokenTransfer(sender, recipient, amount);
uint256 currentAllowance = _allowances[sender][msg.sender];
require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
_approve(sender, msg.sender, currentAllowance - amount);
return true;
}

function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
_approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
return true;
}

function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
uint256 currentAllowance = _allowances[msg.sender][spender];
require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
_approve(msg.sender, spender, currentAllowance.sub(subtractedValue));
return true;
}

function _approve(address owner, address spender, uint256 amount) internal {
require(owner != address(0), "ERC20: approve from the zero address");
require(spender != address(0), "ERC20: approve to the zero address");
_allowances[owner][spender] = amount;
emit Approval(owner, spender, amount);
}
}
// File: contracts/Marketplace.sol


pragma solidity ^0.8.0;

interface IMarketplace {
    function createListing(uint256 _price, bool _isNft, uint256 _tokenId, address _tokenContract) external;
    function buyListing(uint256 _id) external;
    function withdraw(address _tokenContract, uint256 _tokenId) external;
    function setSellerFee(uint256 _fee) external;
    function pause() external;
    function unpause() external;
}

// Import necessary libraries







contract Marketplace is Pausable, Ownable, IMarketplace {

    // Define the seller fees
    uint256 public sellerFee = 2; // 2%

    // Define the struct for a listing
    struct Listing {
        uint256 id;
        address payable seller;
        uint256 price;
        bool sold;
        bool isNft;
        uint256 tokenId;
        address tokenContract;
    }

    // Define an array of all the listings
    Listing[] public listings;

    // Define events
    event ListingCreated(uint256 indexed id, address indexed seller, uint256 price, bool isNft, uint256 tokenId, address tokenContract);
    event ListingSold(uint256 indexed id, address indexed buyer, address indexed seller, uint256 price, bool isNft, uint256 tokenId, address tokenContract);

    // Create a new listing
    function createListing(uint256 _price, bool _isNft, uint256 _tokenId, address _tokenContract) public whenNotPaused override {
        require(_price > 0, "Price must be greater than zero");
        require(IERC20(_tokenContract).balanceOf(msg.sender) >= _price, "Insufficient balance");
        if(_isNft){
            IERC721(_tokenContract).transferFrom(msg.sender, address(this), _tokenId);
        } else {
            IERC20(_tokenContract).transferFrom(msg.sender, address(this), _tokenId);
        }
        uint256 id = listings.length;
        listings.push(Listing(id, payable(msg.sender), _price, false, _isNft, _tokenId, _tokenContract));
        emit ListingCreated(id, msg.sender, _price, _isNft, _tokenId, _tokenContract);
    }

    // Buy a listed item
    function buyListing(uint256 _id) public whenNotPaused override {
        require(_id < listings.length, "Invalid listing id");
        Listing storage listing = listings[_id];
        require(!listing.sold, "Listing already sold");
        require(IERC20(listing.tokenContract).balanceOf(msg.sender) >= listing.price, "Insufficient balance");
        uint256 sellerFeeAmount = (listing.price * sellerFee) / 100;
        uint256 amountToSeller = listing.price - sellerFeeAmount;
        if(listing.isNft){
            IERC721(listing.tokenContract).transferFrom(address(this), msg.sender, listing.tokenId);
        } else {
            IERC20(listing.tokenContract).transferFrom(address(this), msg.sender, listing.tokenId);
        }
        IERC20(listing.tokenContract).transferFrom(msg.sender, owner(), sellerFeeAmount);
    IERC20(listing.tokenContract).transferFrom(msg.sender, listing.seller, amountToSeller);
    listing.sold = true;
    emit ListingSold(_id, msg.sender, listing.seller, listing.price, listing.isNft, listing.tokenId, listing.tokenContract);
}

// Withdraw NFT or tokens from the contract
function withdraw(address _tokenContract, uint256 _tokenId) public onlyOwner override {
    if(IERC721(_tokenContract).balanceOf(address(this)) > 0){
        IERC721(_tokenContract).transferFrom(address(this), owner(), _tokenId);
    } else if(IERC20(_tokenContract).balanceOf(address(this)) > 0){
        IERC20(_tokenContract).transfer(owner(), _tokenId);
    }
}

// Set the seller fee
function setSellerFee(uint256 _fee) public onlyOwner override {
    require(_fee < 100, "Fee cannot be greater than 100%");
    sellerFee = _fee;
}

// Pause and unpause the contract
function pause() public onlyOwner override {
    _pause();
}

function unpause() public onlyOwner override {
    _unpause();
}
}
// File: contracts/Casino.sol



pragma solidity ^0.8.19;




// Interface for the game site
interface IGameSite {
    function playPoker() external returns (uint256);
    function playBlackjack() external returns (uint256);
    function playRoulette() external returns (uint256);
    function playGames() external returns (uint256, uint256, uint256);
}

// Interface for the token contract
interface IToken {
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract Casino is Ownable, ReentrancyGuard {
    // Minimum bet amount
    uint256 public minimumBet;

    // Total amount of bets placed
    uint256 public totalBets;

    // Number of bets placed
    uint256 public numberOfBets;

    // Flag indicating if game has ended
    bool public gameEnded;

    // Game site contract
    IGameSite public gameSite;

    // Token contract
    IToken public token;

    // Struct representing a single bet
    struct Bet {
        uint256 amount;
        uint256 team;
        address payable player;
        address tokenAddress;
    }

    // Mapping of bet IDs to their corresponding Bet structs
mapping(uint256 => Bet) public bets;
// Struct representing a single sports bet
struct SportsBet {
    uint256 amount;
    uint256 outcome;
    address payable player;
    address tokenAddress;
}

// Mapping of sports bet IDs to their corresponding SportsBet structs
mapping(uint256 => SportsBet) public sportsBets;

// Number of sports bets placed
uint256 public numberOfSportsBets;

constructor(address _tokenAddress) {
    minimumBet = 1;
    token = IToken(_tokenAddress);
}

// Function to set the game site contract address
function setGameSiteAddress(address _gameSiteAddress) external onlyOwner {
    gameSite = IGameSite(_gameSiteAddress);
}

// Function to place a bet on a team
function placeBet(uint256 _team, uint256 _amount) external nonReentrant {
    require(!gameEnded, "Game has ended.");
    require(_amount >= minimumBet, "Bet amount is too low.");
    require(token.balanceOf(msg.sender) >= _amount, "Not enough tokens to place bet.");

    // Transfer tokens from player to contract
    require(token.transferFrom(msg.sender, address(this), _amount), "Token transfer failed.");

   // Add bet to mapping
bets[numberOfBets] = Bet(_amount, _team, payable(msg.sender), address(token));
numberOfBets++;
totalBets += _amount;
}

// Function to place a sports bet on a team
function placeSportsBet(uint256 _outcome, uint256 _amount) external nonReentrant {
    require(!gameEnded,"Game has ended.");
require(_amount >= minimumBet, "Bet amount is too low.");
require(token.balanceOf(msg.sender) >= _amount, "Not enough tokens to place bet.");
    // Transfer tokens from player to contract
    require(token.transferFrom(msg.sender, address(this), _amount), "Token transfer failed.");

// Add sports bet to mapping
sportsBets[numberOfSportsBets] = SportsBet(_amount, _outcome, payable(msg.sender), address(token));
numberOfSportsBets++;
totalBets += _amount;
}

// Function to end the game and distribute prizes to the winners
function endGame() external onlyOwner {
    require(!gameEnded, "Game has already ended.");

    // Call game site to get the results
    (uint256 pokerResult, uint256 blackjackResult, uint256 rouletteResult) = gameSite.playGames();

    // Calculate the winning team based on the game site results
    uint256 winningTeam;
    if (pokerResult > blackjackResult && pokerResult > rouletteResult) {
        winningTeam = 1;
    } else if (blackjackResult > pokerResult && blackjackResult > rouletteResult) {
        winningTeam = 2;
    } else {
        winningTeam = 3;
    }

    // Distribute prizes to the winners
    distributePrizes(winningTeam);

    // Reset the game
    resetGame();
}


// Function to distribute prizes to the winners
function distributePrizes(uint256 _winningTeam) internal {
    uint256 totalWinningBets = 0;
    uint256 totalLosingBets = 0;
    uint256 winningBetAmount = 0;
    uint256 losingBetAmount = 0;

    // Calculate the total amount bet on the winning team and the losing team
for (uint256 i = 0; i < numberOfBets; i++) {
if (bets[i].team == _winningTeam) {
totalWinningBets++;
winningBetAmount += bets[i].amount;
} else {
totalLosingBets++;
losingBetAmount += bets[i].amount;
}
}
    // Calculate the prize pool for the winning team and the losing team
    uint256 winningPrizePool = totalLosingBets > 0 ? (losingBetAmount * totalWinningBets * 95) / (totalLosingBets * 100) : 0;
    uint256 losingPrizePool = totalWinningBets > 0 ? (winningBetAmount * totalLosingBets * 95) / (totalWinningBets * 100) : 0;

    // Distribute the prizes to the winners
    for (uint256 i = 0; i < numberOfBets; i++) {
        if (bets[i].team == _winningTeam) {
            require(token.transfer(bets[i].player, bets[i].amount + ((bets[i].amount * winningPrizePool) / winningBetAmount)), "Token transfer failed.");
        } else {
            require(token.transfer(bets[i].player, bets[i].amount + ((bets[i].amount * losingPrizePool) / losingBetAmount)), "Token transfer failed.");
        }
    }

    // Distribute the prizes for the sports bets
    for (uint256 i = 0; i < numberOfSportsBets; i++) {
        SportsBet memory sportsBet = sportsBets[i];
        if (sportsBet.outcome == _winningTeam) {
require(token.transfer(sportsBet.player, sportsBet.amount * 2), "Token transfer failed.");
}
}
    // Set gameEnded flag to true
    gameEnded = true;
}

// Function to withdraw tokens from the contract
function withdrawTokens(address _tokenAddress) external onlyOwner {
    IToken tokenContract = IToken(_tokenAddress);
    require(tokenContract.transfer(owner(), tokenContract.balanceOf(address(this))), "Token transfer failed.");
}

// Function to withdraw ether from the contract
function withdrawEther() external onlyOwner {
    payable(owner()).transfer(address(this).balance);
}

// Function to update the minimum bet
function updateMinimumBet(uint256 _newMinimumBet) external onlyOwner {
    minimumBet = _newMinimumBet;
}

// Function to reset the game
function resetGame() internal {
    gameEnded = false;
    totalBets = 0;
    numberOfBets = 0;
    numberOfSportsBets = 0;

    // Delete all bets and sports bets
    for (uint256 i = 0; i < numberOfBets; i++) {
        delete bets[i];
    }
    for (uint256 i = 0; i < numberOfSportsBets; i++) {
        delete sportsBets[i];
    }
}

// Function to update the token address
function updateTokenAddress(address _tokenAddress) external onlyOwner {
    token = IToken(_tokenAddress);
}
}
// File: contracts/NFTContract.sol


pragma solidity ^0.8.0;

interface INFTContract {
    function mint(address recipient, uint256 tokenId, string memory tokenURI) external;
    function transferFrom(address from, address to, uint256 tokenId) external;
    function claimAirdrop(uint256 index) external;
    function setTokenAddress(address _tokenAddress) external;
    function setMarketplaceAddress(address _marketplaceAddress) external;
    function setCasinoAddress(address _casinoAddress) external;
    function totalSupply() external view returns (uint256);
    function balanceOf(address owner) external view returns (uint256);
    function ownerOf(uint256 tokenId) external view returns (address);
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function approve(address to, uint256 tokenId) external;
    function getApproved(uint256 tokenId) external view returns (address);
    function setApprovalForAll(address operator, bool approved) external;
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}









contract NFTContract is Context, IERC721, Ownable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;
    using Address for address;

    string public name;
    string public symbol;
    mapping(uint256 => address) private _owners;
    mapping(address => uint256) private _balances;
    mapping(uint256 => address) private _tokenApprovals;
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    uint256 private _totalSupply;

    struct Airdrop {
        address nftContract;
        uint256 tokenId;
        uint256 amount;
        uint256 interval;
        uint256 lastClaimed;
    }

    Airdrop[] public airdrops;
    IERC20 public token;
    uint256 public nextAirdrop;

constructor(string memory _name) {
    name = _name;
    nextAirdrop = block.timestamp.add(3 weeks);
}


    
    function setTokenAddress(address _tokenAddress) public {
    token = IERC20(_tokenAddress);
    }


    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address owner) public view override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    function ownerOf(uint256 tokenId) public view override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId) public override {
        safeTransferFrom(from, to, tokenId, "");
    }

    function _exists(uint256 tokenId) internal view returns (bool) {
        return _owners[tokenId] != address(0);
    }

    function _mint(address to, uint256 tokenId) internal {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    function mint(address recipient, uint256 tokenId, string memory tokenURI) public onlyOwner {
        _mint(recipient, tokenId);
        _setTokenURI(tokenId, tokenURI);
        _totalSupply = _totalSupply.add(1);
    }

    function addAirdrop(address nftContract, uint256 tokenId, uint256 amount, uint256 interval) external onlyOwner {
Airdrop memory airdrop = Airdrop(nftContract, tokenId, amount, interval, block.timestamp);
airdrops.push(airdrop);
}

function approve(address to, uint256 tokenId) public virtual override {
address owner = ownerOf(tokenId);
require(to != owner, "ERC721: approval to current owner");
require(
_msgSender() == owner || isApprovedForAll(owner, _msgSender()),
"ERC721: approve caller is not owner nor approved for all"
);
_approve(to, tokenId);
}

function setApprovalForAll(address operator, bool approved) public virtual override {
require(operator != _msgSender(), "ERC721: approve to caller");
_operatorApprovals[_msgSender()][operator] = approved;
emit ApprovalForAll(_msgSender(), operator, approved);
}

function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Receiver).interfaceId;
}

function transferFrom(address from, address to, uint256 tokenId) public virtual override {
require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
_transfer(from, to, tokenId);
}

function claimAirdrop(uint256 index) external {
Airdrop storage airdrop = airdrops[index];
require(block.timestamp >= airdrop.lastClaimed.add(airdrop.interval), "Not yet time to claim airdrop");
require(IERC721(airdrop.nftContract).ownerOf(airdrop.tokenId) == _msgSender(), "Not the owner of the NFT");
airdrop.lastClaimed = block.timestamp;
token.safeTransfer(_msgSender(), airdrop.amount);
}

function setAirdrop(uint256 index, uint256 amount, uint256 interval) external onlyOwner {
Airdrop storage airdrop = airdrops[index];
airdrop.amount = amount;
airdrop.interval = interval;
}

function removeAirdrop(uint256 index) external onlyOwner {
airdrops[index] = airdrops[airdrops.length - 1];
airdrops.pop();
}

function getNextAirdrop() external view returns (uint256) {
return nextAirdrop;
}

function setNextAirdrop(uint256 _nextAirdrop) external onlyOwner {
nextAirdrop = _nextAirdrop;
}

function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
_transfer(from, to, tokenId);
require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
}

function getApproved(uint256 tokenId) public view virtual override returns (address) {
require(_exists(tokenId), "ERC721: approved query for nonexistent token");
return _tokenApprovals[tokenId];
}

function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
return _operatorApprovals[owner][operator];
}

function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
require(_exists(tokenId), "ERC721: operator query for nonexistent token");
address owner = ownerOf(tokenId);
return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
}

function _transfer(address from, address to, uint256 tokenId) internal {
require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not owned");
require(to != address(0), "ERC721: transfer to the zero address");

_approve(address(0), tokenId);

_balances[from] -= 1;
_balances[to] += 1;
_owners[tokenId] = to;

emit Transfer(from, to, tokenId);
}

function _approve(address to, uint256 tokenId) internal {
_tokenApprovals[tokenId] = to;
emit Approval(ownerOf(tokenId), to, tokenId);
}

function _setTokenURI(uint256 tokenId, string memory) internal virtual {
require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
}

function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
if (to.isContract()) {
try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
return retval == IERC721Receiver.onERC721Received.selector;
} catch (bytes memory reason) {
if (reason.length == 0) {
revert("ERC721: transfer to non ERC721Receiver implementer");
} else {
assembly {
revert(add(32, reason), mload(reason))
}
}
}
} else {
return true;
}
}
}
// File: contracts/GovernanceContract.sol


pragma solidity ^0.8.0;



interface IGovernanceContract {
    function setAdministrator(address _administrator) external;
    function governor() external view returns (address);
    function createProposal(bytes memory _proposalData) external returns (uint256);
    function vote(uint256 _proposalId, bool _support) external;
    function setTokenAddress(address _tokenAddress) external;
    function setVotingPower(address _voter, uint256 _votingPower) external;

    function setProposalQuorum(uint256 _quorum) external;
    function setProposalVotingPeriod(uint256 _votingPeriod) external;
    function setProposalMinimumVotingPower(uint256 _minimumVotingPower) external;

    function getProposal(uint256 _proposalId) external view returns (
        address proposer,
        bytes memory proposalData,
        uint256 votingDeadline,
        bool executed,
        bool proposalPassed,
        uint256 yesVotes,
        uint256 noVotes
    );
}

contract GovernanceContract is IGovernanceContract, Ownable {
    using SafeMath for uint256;

    struct Proposal {
        address proposer;
        bytes proposalData;
        uint256 votingDeadline;
        bool executed;
        bool proposalPassed;
        uint256 yesVotes;
        uint256 noVotes;
        mapping(address => bool) hasVoted;
    }

    address public administrator;
address public dexContractAddress;
Proposal[] public proposals;
uint256 public quorum;
uint256 public votingPeriod;
uint256 public minimumVotingPower;
address public tokenAddress;

function setProposalQuorum(uint256 _quorum) external override onlyOwner {
    quorum = _quorum;
}

function setProposalVotingPeriod(uint256 _votingPeriod) external override onlyOwner {
    votingPeriod = _votingPeriod;
}

function setProposalMinimumVotingPower(uint256 _minimumVotingPower) external override onlyOwner {
    minimumVotingPower = _minimumVotingPower;
}

mapping(address => uint256) public votingPower;

event ProposalCreated(uint256 proposalId, address proposer, bytes proposalData);
event Voted(uint256 proposalId, address voter, bool support, uint256 votingPower);
event ProposalExecuted(uint256 proposalId);

modifier hasMinimumVotingPower() {
    require(votingPower[msg.sender] >= minimumVotingPower, "Not enough voting power");
    _;
}

function setDexContractAddress(address _dexContractAddress) external onlyOwner {
    dexContractAddress = _dexContractAddress;
}

constructor(uint256 _quorum, uint256 _votingPeriod, uint256 _minimumVotingPower) {
    administrator = msg.sender;
    quorum = _quorum;
    votingPeriod = _votingPeriod;
    minimumVotingPower = _minimumVotingPower;
}

function executeProposal(uint256 _proposalId, address _targetContract, bytes memory _functionSignature) external {
    Proposal storage proposal = proposals[_proposalId];
    require(proposal.proposalPassed, "Proposal has not passed");
    require(!proposal.executed, "Proposal has already been executed");
    require(block.timestamp > proposal.votingDeadline, "Voting period has not ended yet");

    // Execute proposal actions here
    (bool success,) = _targetContract.call(_functionSignature);
    require(success, "Proposal execution failed");

    proposal.executed = true;

    emit ProposalExecuted(_proposalId);
}



// Implement the missing functions from the IGovernanceContract interface
function setAdministrator(address _administrator) external override onlyOwner {
    administrator = _administrator;
}

function governor() external view override returns (address) {
    return administrator;
}

function createProposal(bytes memory _proposalData) external override hasMinimumVotingPower returns (uint256) {
    uint256 proposalId = proposals.length;
    Proposal storage newProposal = proposals.push(); // Use 'storage' instead of 'memory', and push a new Proposal to the array
    newProposal.proposer = msg.sender;
    newProposal.proposalData = _proposalData;
    newProposal.votingDeadline = block.timestamp.add(votingPeriod);
    newProposal.executed = false;
    newProposal.proposalPassed = false;
    newProposal.yesVotes = 0;
    newProposal.noVotes = 0;
    
    emit ProposalCreated(proposalId, msg.sender, _proposalData);
    return proposalId;
}


function vote(uint256 _proposalId, bool _support) external override hasMinimumVotingPower {
    Proposal storage proposal = proposals[_proposalId];
    require(block.timestamp <= proposal.votingDeadline, "Voting period has ended");
    require(!proposal.hasVoted[msg.sender], "Voter has already voted");

    if (_support) {
        proposal.yesVotes = proposal.yesVotes.add(votingPower[msg.sender]);
    } else {
        proposal.noVotes = proposal.noVotes.add(votingPower[msg.sender]);
    }

    if (proposal.yesVotes >= quorum) {
        proposal.proposalPassed = true;
    }

    proposal.hasVoted[msg.sender] = true;

    emit Voted(_proposalId, msg.sender, _support, votingPower[msg.sender]);
}

function setTokenAddress(address _tokenAddress) external override onlyOwner {
    tokenAddress = _tokenAddress;
}

function setVotingPower(address _voter, uint256 _votingPower) external override onlyOwner {
    votingPower[_voter] = _votingPower;
}

function getProposal(uint256 _proposalId) external view override returns (
    address proposer,
    bytes memory proposalData,
    uint256 votingDeadline,
    bool executed,
    bool proposalPassed,
    uint256 yesVotes,
    uint256 noVotes
) {
    Proposal storage proposal = proposals[_proposalId];
    proposer = proposal.proposer;
    proposalData = proposal.proposalData;
    votingDeadline = proposal.votingDeadline;
    executed = proposal.executed;
    proposalPassed = proposal.proposalPassed;
    yesVotes = proposal.yesVotes;
    noVotes = proposal.noVotes;
}
}


// File: contracts/ShitpostCats.sol


pragma solidity 0.8.19;














contract ShitpostCats is
    ERC20Capped,
    ERC20Burnable,
    Ownable,
    Pausable,
    ReentrancyGuard
{
    uint256 public constant MAX_SUPPLY = 333 * 10**12 * 10**18;

    address public governanceContractAddress;
    address public stakingContractAddress;
    address public nftContractAddress;
    address public feeAndAntiRugContractAddress;
    address public gameSiteAddress;
    address public marketplaceContractAddress;
    address public communityGamingContractAddress;
    address public dexContractAddress;
    mapping(address => bool) public dexContracts;
    event DexContractAdded(address indexed dexContract);
    event DexContractRemoved(address indexed dexContract);
    address public casinoContractAddress;
    Casino public casinoContract;
    IGovernanceContract public governanceContract;
    IStakingContract public stakingContract;
    INFTContract public nftContract;
    IFeeAndAntiRugContract feeAndAntiRugContract;
    IMarketplace public marketplaceContract;
    ICommunityGaming public communityGamingContract;
    IDexContract public dexContract;

    modifier onlyGovernance() {
        require(msg.sender == governanceContractAddress, "Only Governance contract can call this function");
        _;
    }

    modifier onlyStaking() {
        require(msg.sender == stakingContractAddress, "Only Staking contract can call this function");
        _;
    }

    modifier onlyNFT() {
        require(msg.sender == nftContractAddress, "Only NFT contract can call this function");
        _;
    }

    modifier onlyFeeAndAntiRug() {
        require(msg.sender == feeAndAntiRugContractAddress, "Only Fee and Anti-Rug contract can call this function");
        _;
    }

    modifier onlyGameSite() {
        require(msg.sender == gameSiteAddress, "Only Game Site contract can call this function");
        _;
    }

    modifier onlyMarketplace() {
        require(msg.sender == marketplaceContractAddress, "Only Marketplace contract can call this function");
        _;
    }

    modifier onlyCommunityGaming() {
        require(msg.sender == communityGamingContractAddress, "Only Community Gaming contract can call this function");
        _;
    }

    modifier onlyDEX() {
        require(msg.sender == dexContractAddress, "Only DEX contract can call this function");
        _;
    }

    constructor()
        ERC20("Shitpost Cats", "SHATS")
        ERC20Capped(MAX_SUPPLY)
    {
        // Mint initial supply to deployment wallet
        _mint(msg.sender, 300 * 10**12 * 10**18);
    }

    function mint(address to, uint256 amount) public onlyOwner {
        require(totalSupply() + amount <= cap(), "Total supply cannot exceed 333 trillion");
        _mint(to, amount);

}
function _beforeTokenTransfer(address from, address to, uint256 amount)
    internal
    virtual
    override(ERC20)
    whenNotPaused
{
    require(to != address(this), "Cannot transfer to contract address");
    require(to != address(0), "Cannot transfer to zero address");
    super._beforeTokenTransfer(from, to, amount);
}

function _mint(address account, uint256 amount)
    internal
    virtual
    override(ERC20, ERC20Capped)
{
    super._mint(account, amount);
}

function renounceOwnership() public view override onlyOwner {
    revert("Cannot renounce ownership");
}

function transferOwnership(address newOwner) public override onlyOwner {
    require(
        newOwner != address(0),
        "Cannot transfer ownership to zero address"
    );
    super.transferOwnership(newOwner);
}

function paused() public view override returns (bool) {
    return Pausable.paused();
}

function pause() public onlyOwner {
    _pause();
}

// Addresses

function setGovernanceContractAddress(address _governanceContractAddress)
    external
    onlyOwner
{
    require(
        governanceContractAddress == address(0),
        "Governance contract address has already been set"
    );
    governanceContractAddress = _governanceContractAddress;
    governanceContract = IGovernanceContract(_governanceContractAddress);
}

function setStakingContractAddress(address _stakingContractAddress)
    external
    onlyOwner
{
    require(
        stakingContractAddress == address(0),
        "Staking Contract address has already been set"
    );
    stakingContractAddress = _stakingContractAddress;
    stakingContract = IStakingContract(_stakingContractAddress);
}

function setNFTContractAddress(address _nftContractAddress)
    external
    onlyOwner
{
    require(
        nftContractAddress == address(0),
        "NFT Contract address has already been set"
    );
    nftContractAddress = _nftContractAddress;
    nftContract = INFTContract(_nftContractAddress);
}

function setFeeAndAntiRugContractAddress(
    address _feeAndAntiRugContractAddress
) external onlyOwner {
    require(
        feeAndAntiRugContractAddress == address(0),
        "Fee and Anti-Rug Contract address has already been set"
    );
    feeAndAntiRugContractAddress = _feeAndAntiRugContractAddress;
    feeAndAntiRugContract = IFeeAndAntiRugContract(
        _feeAndAntiRugContractAddress
    );
}

function setCommunityGamingContractAddress(
    address _communityGamingContractAddress
) external onlyOwner {
    require(
        communityGamingContractAddress == address(0),
        "Community Gaming Contract address has already been set"
    );
    communityGamingContractAddress = _communityGamingContractAddress;
    communityGamingContract = ICommunityGaming(
        _communityGamingContractAddress
    );
}

function setMarketplaceContractAddress(address _marketplaceContractAddress)
    external
    onlyOwner
{
    require(
        marketplaceContractAddress == address(0),
        "Marketplace Contract address has already been set"
    );
    marketplaceContractAddress = _marketplaceContractAddress;
    marketplaceContract = IMarketplace(_marketplaceContractAddress);
}

function setDEXContractAddress(address _dexContractAddress)
    external
    onlyOwner
{
    require(
        dexContractAddress == address(0),
        "DEX Contract address has already been set"
);
dexContractAddress = _dexContractAddress;
dexContract = IDexContract(_dexContractAddress);
}
function setCasinoContractAddress(address _casinoContractAddress)
    external
    onlyOwner
{
    require(
        casinoContractAddress == address(0),
        "Casino Contract address has already been set"
    );
    casinoContractAddress = _casinoContractAddress;
    casinoContract = Casino(_casinoContractAddress);
}

function setGameSiteAddress(address _gameSiteAddress) external onlyOwner {
    require(
        gameSiteAddress == address(0),
        "Game Site Contract address has already been set"
    );
    gameSiteAddress = _gameSiteAddress;
}

function addDexContract(address _dexContract) external onlyOwner {
    require(
        !dexContracts[_dexContract],
        "DEX contract has already been added"
    );
    dexContracts[_dexContract] = true;
    emit DexContractAdded(_dexContract);
}

function removeDexContract(address _dexContract) external onlyOwner {
    require(dexContracts[_dexContract], "DEX contract not found");
    dexContracts[_dexContract] = false;
    emit DexContractRemoved(_dexContract);
}


// Dex contract functions

function setLiquidityPool(address _liquidityPool) external {
        dexContract.setLiquidityPool(_liquidityPool);
    }

    function setUniswapPair(IUniswapV2Pair _uniswapPair) external {
        dexContract.setUniswapPair(_uniswapPair);
    }

    function setPancakePair(IPancakePair _pancakePair) external {
        dexContract.setPancakePair(_pancakePair);
    }

    function swapOnUniswap(uint256 _amountIn, uint256 _amountOutMin) external {
        dexContract.swapOnUniswap(_amountIn, _amountOutMin);
    }

    function swapOnPancakeSwap(uint256 _amountIn, uint256 _amountOutMin) external {
        dexContract.swapOnPancakeSwap(_amountIn, _amountOutMin);
    }

    function addLiquidityUniswap(uint256 tokenAmount, uint256 ethAmount, uint256 tokenMin, uint256 ethMin) external payable {
        dexContract.addLiquidityUniswap{value: msg.value}(tokenAmount, ethAmount, tokenMin, ethMin);
    }

    function addLiquidityPancakeSwap(uint256 tokenAmount, uint256 bnbAmount, uint256 tokenMin, uint256 bnbMin) external payable {
        dexContract.addLiquidityPancakeSwap{value: msg.value}(tokenAmount, bnbAmount, tokenMin, bnbMin);
    }

    function removeLiquidityUniswap(uint256 liquidity, uint256 tokenMin, uint256 ethMin) external {
        dexContract.removeLiquidityUniswap(liquidity, tokenMin, ethMin);
    }

    function removeLiquidityPancakeSwap(uint256 liquidity, uint256 tokenMin, uint256 bnbMin) external {
        dexContract.removeLiquidityPancakeSwap(liquidity, tokenMin, bnbMin);
    }

    function getTokenPriceUniswap() external view returns (uint256) {
        return dexContract.getTokenPriceUniswap();
    }

    function getTokenPricePancakeSwap() external view returns (uint256) {
        return dexContract.getTokenPricePancakeSwap();
    }


// Gaming contract functions

// Set the token address used in the CommunityGaming contract
function setTokenAddressInCommunityGaming(address _token) external onlyOwner {
communityGamingContract.setTokenAddress(_token);
}

// Deposit tokens to the CommunityGaming contract
function depositInCommunityGaming(uint256 _amount) external {
communityGamingContract.deposit(_amount);
}

// Withdraw tokens from the CommunityGaming contract
function withdrawInCommunityGaming(uint256 _amount) external {
communityGamingContract.withdraw(_amount);
}

// Transfer tokens to another address in the CommunityGaming contract
function transferInCommunityGaming(address _recipient, uint256 _amount) external {
communityGamingContract.transfer(_recipient, _amount);
}

// Approve another address to spend tokens on your behalf in the CommunityGaming contract
function approveInCommunityGaming(address _spender, uint256 _amount) external {
communityGamingContract.approve(_spender, _amount);
}

// Transfer tokens from one address to another in the CommunityGaming contract
function transferFromInCommunityGaming(address _sender, address _recipient, uint256 _amount) external {
communityGamingContract.transferFrom(_sender, _recipient, _amount);
}

// Set the referral reward percentage in the CommunityGaming contract
function setReferralRewardPercentageInCommunityGaming(uint256 _rewardPercentage) external onlyOwner {
communityGamingContract.setReferralRewardPercentage(_rewardPercentage);
}

// Refer a new user to the CommunityGaming contract
function referInCommunityGaming(address _referee) external {
communityGamingContract.refer(_referee);
}

// Form a team in the CommunityGaming contract
function formTeamInCommunityGaming(address[] calldata _teamMembers) external {
communityGamingContract.formTeam(_teamMembers);
}

// Request to join a team in the CommunityGaming contract
function requestJoinTeamInCommunityGaming(address _team) external {
communityGamingContract.requestJoinTeam(_team);
}

// Accept a team join request in the CommunityGaming contract
function acceptTeamRequestInCommunityGaming(address _player) external {
communityGamingContract.acceptTeamRequest(_player);
}

// Get the members of a team in the CommunityGaming contract
function getTeamMembersInCommunityGaming(address _team) external view returns (address[] memory) {
return communityGamingContract.getTeamMembers(_team);
}

// Get the join requests of a team in the CommunityGaming contract
function getTeamRequestsInCommunityGaming(address _team) external view returns (address[] memory) {
return communityGamingContract.getTeamRequests(_team);
}

// Register a tournament in the CommunityGaming contract
function registerTournamentInCommunityGaming(uint256 _registrationFee, uint256 _deadline) external {
communityGamingContract.registerTournament(_registrationFee, _deadline);
}

// Sponsor a tournament in the CommunityGaming contract
function sponsorTournamentInCommunityGaming(uint256 _tournamentId, uint256 _amount) external {
communityGamingContract.sponsorTournament(_tournamentId, _amount);
}

// Participate in a tournament in the CommunityGaming contract
function participateInTournamentInCommunityGaming(uint256 _tournamentId) external {
communityGamingContract.participateInTournament(_tournamentId);
}

// Start a tournament in the CommunityGaming contract
function startTournamentInCommunityGaming(uint256 _tournamentId) external {
communityGamingContract.startTournament(_tournamentId);
}

// End a tournament in the CommunityGaming contract and declare the winner
function endTournamentInCommunityGaming(uint256 _tournamentId, address _winner) external {
    communityGamingContract.endTournament(_tournamentId, _winner);
}


//Marketplace functions

// Creates a new listing on the marketplace with the provided parameters.
function createListingOnMarketplace(uint256 _price, bool _isNft, uint256 _tokenId, address _tokenContract) external {
    marketplaceContract.createListing(_price, _isNft, _tokenId, _tokenContract);
}

// Buys a specific listing on the marketplace by providing the ID of the listing.
function buyListingOnMarketplace(uint256 _id) external {
    marketplaceContract.buyListing(_id);
}

// Withdraws a listing from the marketplace by providing the token contract address and token ID.
function withdrawFromMarketplace(address _tokenContract, uint256 _tokenId) external {
    marketplaceContract.withdraw(_tokenContract, _tokenId);
}

// Sets the seller fee for the marketplace.
function setSellerFeeOnMarketplace(uint256 _fee) external {
    marketplaceContract.setSellerFee(_fee);
}

// Pauses the operation of the marketplace.
function pauseMarketplace() external {
    marketplaceContract.pause();
}

// Unpauses the operation of the marketplace.
function unpauseMarketplace() external {
    marketplaceContract.unpause();
}


// Casino contract functions

// Plays the poker game on a specified game site contract and returns the result of the game.
function playPokerOnGameSite(IGameSite _gameSiteContract) external returns (uint256) {
    return _gameSiteContract.playPoker();
}

// Plays the blackjack game on a specified game site contract and returns the result of the game.
function playBlackjackOnGameSite(IGameSite _gameSiteContract) external returns (uint256) {
    return _gameSiteContract.playBlackjack();
}

// Plays the roulette game on a specified game site contract and returns the result of the game.
function playRouletteOnGameSite(IGameSite _gameSiteContract) external returns (uint256) {
    return _gameSiteContract.playRoulette();
}

// Plays multiple games on a specified game site contract and returns the results of the games.
function playGamesOnGameSite(IGameSite _gameSiteContract) external returns (uint256, uint256, uint256) {
    return _gameSiteContract.playGames();
}


// Casino token functions

// Transfers a specified amount of tokens from the caller's address to a specified recipient address using a specified token contract, and returns a boolean indicating the success of the transfer.
function transferTokens(IToken _tokenContract, address _recipient, uint256 _amount) external returns (bool) {
    return _tokenContract.transfer(_recipient, _amount);
}

// Transfers a specified amount of tokens from a specified sender address to a specified recipient address using a specified token contract, and returns a boolean indicating the success of the transfer.
function transferTokensFrom(IToken _tokenContract, address _sender, address _recipient, uint256 _amount) external returns (bool) {
    return _tokenContract.transferFrom(_sender, _recipient, _amount);
}

// Returns the balance of a specified account using a specified token contract.
function getBalanceOfToken(IToken _tokenContract, address _account) external view returns (uint256) {
    return _tokenContract.balanceOf(_account);
}


//Fee and anti rug contract functions

// Sets the governance address for the contract that manages the fee and anti-rug mechanics, which allows the governance contract to change certain parameters.
function setGovernanceAddress(address _governanceContract) public onlyOwner {
    feeAndAntiRugContract.setGovernanceAddress(_governanceContract);
}

// Sets the token address for the contract that manages the fee and anti-rug mechanics.
function setTokenAddress(address _tokenAddress) public onlyOwner {
    feeAndAntiRugContract.setTokenAddress(_tokenAddress);
}

// Sets the fee and rug parameters for the contract that manages the fee and anti-rug mechanics.
function setFeeAndRugParams(uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _feeDenominator) public onlyOwner {
    feeAndAntiRugContract.setFeeAndRugParams(_liquidityFee, _reflectionFee, _marketingFee, _feeDenominator);
}

// Transfers a specified amount of tokens to a specified recipient address using the contract that manages the fee and anti-rug mechanics, and returns a boolean indicating the success of the transfer.
function transfer(address _recipient, uint256 _amount) public onlyOwner override returns (bool) {
    return feeAndAntiRugContract.transfer(_recipient, _amount);
}


// Sets the maximum wallet balance allowed for the contract that manages the fee and anti-rug mechanics.
function setMaxWallet(uint256 _maxWallet) public onlyOwner {
    feeAndAntiRugContract.setMaxWallet(_maxWallet);
}

// Sets the maximum transaction amount allowed for the contract that manages the fee and anti-rug mechanics.
function setMaxTxAmount(uint256 _maxTxAmount) public onlyOwner {
    feeAndAntiRugContract.setMaxTxAmount(_maxTxAmount);
}

// Adds a specified address to the whitelist for the contract that manages the fee and anti-rug mechanics.
function addWhitelisted(address _address) public onlyOwner {
    feeAndAntiRugContract.addWhitelisted(_address);
}

// Removes a specified address from the whitelist for the contract that manages the fee and anti-rug mechanics.
function removeWhitelisted(address _address) public onlyOwner {
    feeAndAntiRugContract.removeWhitelisted(_address);
}

// Adds a specified address to the blacklist for the contract that manages the fee and anti-rug mechanics.
function addBlacklist(address _address) public onlyOwner {
    feeAndAntiRugContract.addBlacklist(_address);
}

// Removes a specified address from the blacklist for the contract that manages the fee and anti-rug mechanics.
function removeBlacklist(address _address) public onlyOwner {
    feeAndAntiRugContract.removeBlacklist(_address);
}

// Airdrops a specified amount of tokens to specified recipient addresses using the contract that manages the fee and anti-rug mechanics.
function airdrop(address[] calldata recipients, uint256[] calldata amounts) public onlyOwner {
    feeAndAntiRugContract.airdrop(recipients, amounts);
}


//NFT contract functions

// Mint a new NFT token and assign it to the recipient
function mintNFT(address recipient, uint256 tokenId, string memory tokenURI) external onlyNFT {
nftContract.mint(recipient, tokenId, tokenURI);
}

// Transfer an existing NFT token from one address to another
function transferNFTFrom(address from, address to, uint256 tokenId) external onlyNFT {
nftContract.transferFrom(from, to, tokenId);
}

// Claim an NFT airdrop
function claimNFTAirdrop(uint256 index) external onlyNFT {
nftContract.claimAirdrop(index);
}

// Set the address of the token contract used for the NFT
function setTokenAddressInNFT(address _tokenAddress) external onlyNFT {
nftContract.setTokenAddress(_tokenAddress);
}

// Set the address of the marketplace contract used for the NFT
function setMarketplaceAddressInNFT(address _marketplaceAddress) external onlyNFT {
nftContract.setMarketplaceAddress(_marketplaceAddress);
}

// Set the address of the casino contract used for the NFT
function setCasinoAddressInNFT(address _casinoAddress) external onlyNFT {
nftContract.setCasinoAddress(_casinoAddress);
}

// Get the total number of NFT tokens in circulation
function getNFTTotalSupply() external view returns (uint256) {
return nftContract.totalSupply();
}

// Get the number of NFT tokens owned by an address
function getNFTBalanceOf(address owner) external view returns (uint256) {
return nftContract.balanceOf(owner);
}

// Get the owner of an NFT token
function getNFTOwnerOf(uint256 tokenId) external view returns (address) {
return nftContract.ownerOf(tokenId);
}

// Safely transfer an NFT token from one address to another with additional data
function safeTransferNFTFrom(address from, address to, uint256 tokenId, bytes memory _data) external onlyNFT {
nftContract.safeTransferFrom(from, to, tokenId, _data);
}

// Safely transfer an NFT token from one address to another
function safeTransferNFTFrom(address from, address to, uint256 tokenId) external onlyNFT {
nftContract.safeTransferFrom(from, to, tokenId);
}

// Approve an address to transfer an NFT token
function approveNFT(address to, uint256 tokenId) external onlyNFT {
nftContract.approve(to, tokenId);
}

// Get the address approved to transfer an NFT token
function getNFTApproved(uint256 tokenId) external view returns (address) {
return nftContract.getApproved(tokenId);
}

// Approve or revoke an operator's access to transfer all of the sender's NFT tokens
function setNFTApprovalForAll(address operator, bool approved) external onlyNFT {
nftContract.setApprovalForAll(operator, approved);
}

// Check if an operator has been approved to transfer all of the owner's NFT tokens
function isNFTApprovedForAll(address owner, address operator) external view returns (bool) {
return nftContract.isApprovedForAll(owner, operator);
}

// Check if an NFT contract supports a particular interface
function nftSupportsInterface(bytes4 interfaceId) external view returns (bool) {
return nftContract.supportsInterface(interfaceId);
}


//Staking contract functions

// Sets the governance contract address for staking
function setGovernanceContractAddressInStaking(address _governanceContract) external onlyOwner {
stakingContract.setGovernanceContractAddress(_governanceContract);
}

// Sets the governance address for staking
function setGovernanceAddressInStaking(address _governance) external onlyOwner {
stakingContract.setGovernanceAddress(_governance);
}

// Stakes tokens in the staking contract
function stake(uint256 _amount) external {
stakingContract.stake(_amount);
}

// Sets the token address for staking
function setTokenAddressInStaking(address _tokenAddress) external onlyOwner {
stakingContract.setTokenAddress(_tokenAddress);
}

// Withdraws tokens from the staking contract
function withdraw(uint256 _amount) external {
stakingContract.withdraw(_amount);
}

// Claims staking rewards
function claimRewards() external {
stakingContract.claimRewards();
}

// Unstakes tokens from the staking contract
function unstake() external {
stakingContract.unstake();
}

// Calculates staking rewards for the given staker address
function calculateRewards(address _staker) external view returns (uint256) {
return stakingContract.calculateRewards(_staker);
}

// Updates the rewards in the staking contract
function updateRewardsInStaking() external onlyOwner {
stakingContract.updateRewards();
}

// Returns the staking information for the given staker address
function getStakingInfo(address _staker) external view returns (uint256, uint256, uint256) {
return stakingContract.getStakingInfo(_staker);
}


//Governance token functions

// Sets the administrator of the governance contract
function setGovernanceAdministrator(address _administrator) external onlyGovernance {
governanceContract.setAdministrator(_administrator);
}

// Returns the address of the governance contract
function getGovernanceContractAddress() external view returns (address) {
return address(governanceContract);
}

// Sets the minimum quorum required for a governance proposal to pass
function setProposalQuorum(uint256 _quorum) external onlyGovernance {
governanceContract.setProposalQuorum(_quorum);
}

// Sets the voting period for governance proposals
function setProposalVotingPeriod(uint256 _votingPeriod) external onlyGovernance {
governanceContract.setProposalVotingPeriod(_votingPeriod);
}

// Sets the minimum voting power required for a voter to participate in governance proposals
function setProposalMinimumVotingPower(uint256 _minimumVotingPower) external onlyGovernance {
governanceContract.setProposalMinimumVotingPower(_minimumVotingPower);
}

// Creates a new governance proposal
function createGovernanceProposal(bytes memory _proposalData) external onlyGovernance returns (uint256) {
return governanceContract.createProposal(_proposalData);
}

// Votes on a governance proposal
function voteOnGovernanceProposal(uint256 _proposalId, bool _support) external onlyGovernance {
governanceContract.vote(_proposalId, _support);
}

// Sets the address of the governance token
function setGovernanceTokenAddress(address _tokenAddress) external onlyGovernance {
governanceContract.setTokenAddress(_tokenAddress);
}

// Sets the voting power of a voter for governance proposals
function setGovernanceVotingPower(address _voter, uint256 _votingPower) external onlyGovernance {
governanceContract.setVotingPower(_voter, _votingPower);
}

// Returns the details of a governance proposal
function getGovernanceProposal(uint256 _proposalId) external view returns (
address proposer,
bytes memory proposalData,
uint256 votingDeadline,
bool executed,
bool proposalPassed,
uint256 yesVotes,
uint256 noVotes
) {
return governanceContract.getProposal(_proposalId);
}
}