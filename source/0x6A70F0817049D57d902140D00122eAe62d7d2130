// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


 interface ERC20Interface {
    function transfer(address to, uint tokens) external returns (bool success);
    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);
    function balanceOf(address account) external view returns (uint256);
}


contract RltnSwap {
    using SafeMath for uint256;
    address payable ownerAddress;
    address devAddress;
     ERC20Interface TokenAddress;
    mapping(address=>bool) whiteList;
    uint256 public priceforItctToken= 1 ether;
    ERC20Interface public USDTAddress;
    bool public isPublicSale;
 

    event Swap(address indexed user,uint amount,uint newtokens, uint _time);  

    constructor(ERC20Interface _Tokenaddress, address payable owner) {
         devAddress = owner;
        TokenAddress=_Tokenaddress;  
    }

    function SwapTokens(uint256 amount) public payable
    {
           
        require(msg.value>0,"invalid amount");
        require(amount>0,"invalid amount");
         address payable userAddress = payable(devAddress);
        userAddress.transfer(msg.value);
        uint256 _amountUsdt = amount.mul(1e18);
        uint256 tokenValue = (_amountUsdt.div(priceforItctToken)).mul(1e18);
        tokenTransfer(msg.sender,tokenValue);
        emit Swap(msg.sender,amount,tokenValue,block.timestamp);
   
       
    }

  function BalanceOfTokenInContract()public view returns (uint256){
        return ERC20Interface(TokenAddress).balanceOf(address(this));
    }

  function BalanceOfTokenInUser(address userAddress)public view returns (uint256){
        return ERC20Interface(TokenAddress).balanceOf(userAddress);
    }


     function tokenTransfer(address to, uint256 _amount) internal {
         uint256 tokenBal = BalanceOfTokenInContract();
        _amount=_amount;
        require(tokenBal >= _amount,"Token balance is low");

        require(ERC20Interface(TokenAddress).transfer(to, _amount)); 
    }
    
    
    function getTokenquantity(uint256 amount) external view returns(uint256 tokens)
    {
        uint256 _amountUsdt=amount;
        return (_amountUsdt.div(priceforItctToken)).mul(1e18);
    }

 

     function getTokenofUsdt(uint256 amount) external view returns(uint256 tokens)
    {
        uint256 _amountUsdt=amount;
        return (_amountUsdt.div(priceforItctToken)).mul(1e18);
    }

     function getUsdttoTokenValue()external view returns(uint256) {
        return priceforItctToken;
    }

  

     function changedevAddress(address _devAddress) public
    {
        require(msg.sender==devAddress,"Only owner");
        devAddress=_devAddress;
    }
    
    function setPriceForToken(uint _amount) public 
    {
        require(msg.sender==devAddress,"Only owner");
        priceforItctToken=_amount;
    }

       
    function TokenWithdraw(address toAddress,uint256 _amount) public{
        require(msg.sender==devAddress,"Invalid user");
        require(ERC20Interface(TokenAddress).transfer(toAddress, _amount));
    }

    
function bnbWithdraw(address toAddress,uint256 _amount) public{
        require(msg.sender==devAddress,"Invalid user");
         uint256 contractBalance = address(this).balance;
        require(contractBalance >= _amount,"Contract balance is low");
        payable(toAddress).transfer(_amount);
    }

    


}