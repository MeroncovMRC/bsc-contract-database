pragma solidity ^0.8.0;

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IArbitrage {
    function startArbitrage(
        address token0,
        address token1,
        uint256 amount0,
        uint256 amount1
    ) external;
}

interface IPancakeSwap {
    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);
    function getAmountsIn(uint256 amountOut, address[] memory path) external view returns (uint256[] memory amounts);
}

contract ArbitrageBot {
    address public owner;
    IPancakeSwap public pancakeRouter;
    IPancakeSwap public mdexRouter;
    IArbitrage public arbitrageContract;

    constructor(address _pancakeRouter, address _mdexRouter, address _arbitrageContract) {
        owner = msg.sender;
        pancakeRouter = IPancakeSwap(_pancakeRouter);
        mdexRouter = IPancakeSwap(_mdexRouter);
        arbitrageContract = IArbitrage(_arbitrageContract);
    }

    function startArbitrage(
        address token0,
        address token1,
        uint256 amount0,
        uint256 amount1
    ) external {
        require(msg.sender == owner, "Unauthorized access!");
        address[] memory path = new address[](2);
        path[0] = token0;
        path[1] = token1;

        uint256[] memory amounts = pancakeRouter.getAmountsOut(amount0, path);
        uint256 pancakeAmount = amounts[1];
        uint256[] memory amounts_ = mdexRouter.getAmountsIn(pancakeAmount, path);
        uint256 mdexAmount = amounts_[0];

        if (mdexAmount > amount1) {
            arbitrageContract.startArbitrage(token0, token1, amount0, amount1);
        }
    }

    function withdrawToken(address tokenAddress) external {
        require(msg.sender == owner, "Unauthorized access!");
        IERC20 token = IERC20(tokenAddress);
        token.transfer(owner, token.balanceOf(address(this)));
    }

    function withdrawETH() external {
        require(msg.sender == owner, "Unauthorized access!");
        payable(owner).transfer(address(this).balance);
    }

    receive() external payable {}
}