// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


contract MagnaLiquidity is Ownable {
    using SafeMath for uint256;
    
    address public magna;
    address public usd;
    address public trader;
    
    uint256 public reserve0; // magna amount
    uint256 public reserve1; // usd amount

    uint256 public liquidityFee; // 10 ^ 5
    uint256 public treasuryFee; // 10 ^ 5
    uint256 public FEE_DENOMINATOR = 100_000;
    uint256 public withdrawFee;

    address public feeTo;

    mapping(address => UserInfo) public userInfo;

    struct UserInfo {
        uint256 deposit;
        uint256 balance;
        uint256 lastClaim;
    }

    event Deposit(address _from, uint256 _in, uint256 _out);
    event Withdraw(address _from, uint256 _in, uint256 _out);
    event SendTreasuryReward(address _to, uint256 _amount);
    event SetFeeTo(address _feeTo);
    event SetTrader(address _trader);
    event SetFee(uint256 _totalFee, uint256 _treasuryFee);
    event DepositForFund(uint256 _amount);

    constructor(
        address _magna,
        address _feeTo,
        address _usd
    ) {
        magna = _magna;
        liquidityFee = 2000;
        treasuryFee = 500;
        withdrawFee = 35000;
        // USDT
        // usd = 0x55d398326f99059fF775485246999027B3197955;
        usd = _usd;
        feeTo = _feeTo;
    }

    function reserves() external view returns(uint256, uint256) {
        return (reserve0, reserve1);
    }

    function depositNetAmount(uint256 amount_) external view returns (uint256) {
        return amount_.mul(FEE_DENOMINATOR.sub(liquidityFee).sub(treasuryFee)).div(FEE_DENOMINATOR);
    }

    function userDepositied(address owner_) external view returns (uint256) {
        return userInfo[owner_].deposit;
    }

    function setFeeTo(address _feeTo) external onlyOwner returns (bool) {
        feeTo = _feeTo;
        emit SetFeeTo(_feeTo);
        return true;
    }

    function setTrader(address _trader) external onlyOwner returns (bool) {
        trader = _trader;
        emit SetTrader(_trader);
        return true;
    }

    function setFee(uint256 _liquidityFee, uint256 _treasuryFee) external onlyOwner returns (bool) {
        liquidityFee = _liquidityFee;
        treasuryFee = _treasuryFee;
        emit SetFee(liquidityFee, _treasuryFee);
        return true;
    }

    /* only trader can executable
        transfer magna to trader
        transfer treasury fee to feeTo (usd)
    **/
    function deposit(address _sender) external returns (uint256) {
        require(trader != address(0) && msg.sender == trader, "Only trader can trade");
        IERC20 _usd = IERC20(usd);
        uint256 _amount = _usd.balanceOf(address(this)).sub(reserve1);
        require(_sender != address(0), "Invalid zero address");
        require(_amount > 0, "Invalid zero amount");

        (, uint256 _out,) = _deposit(_sender, _amount);

        return _out;
    }

    function depositForFund(uint256 _amount) external returns (bool) {
        IERC20 usd_ = IERC20(usd);
        require(_amount > 0, "Invalid amount");
        require(usd_.balanceOf(_msgSender()) >= _amount, "Invalid balance");
        require(usd_.allowance(_msgSender(), address(this)) >= _amount, "Invalid allowance");
        IERC20(usd).transferFrom(_msgSender(), address(this), _amount);
        reserve1 = reserve1.add(_amount);
        emit DepositForFund(_amount);
        return true;
    }

    /* only trader can executable
        transfer deposit and 65% reward to sender (usd)
        transfer withdraw fee (35%) to trader (usd)
    **/
    function withdraw(address _sender, uint256 _amount) external returns (uint256, uint256) {
        require(trader != address(0) && msg.sender == trader, "Only trader can trade");
        require(_sender != address(0), "Invalid zero address");
        require(_amount > 0, "Invalid zero amount");

        (, uint256 _out, uint256 deposit_) = _withdraw(_sender, _amount);

        return (_out, deposit_);
    }

    /* only trader can executable
        deduct treasury fee (usd)
        increase reserve0, reserve1
        update userInfo
    **/
    function _deposit(address _sender, uint256 _amount) internal returns (uint256, uint256, uint256) {
        uint256 _totalBalance = IERC20(magna).balanceOf(address(this));

        uint256 _swapAmount = uint256(_amount).mul(FEE_DENOMINATOR.sub(liquidityFee).sub(treasuryFee)).div(FEE_DENOMINATOR);
        uint256 _liquidityFeeAmount = uint256(_amount).mul(liquidityFee).div(FEE_DENOMINATOR);
        uint256 _treasuryFeeAmount = uint256(_amount).sub(_swapAmount).sub(_liquidityFeeAmount);
        uint256 _in = _swapAmount.add(_liquidityFeeAmount);
        uint256 _out = _swapAmount;
        if (reserve0 > 0 && reserve1 > 0) {
            _out = _swapAmount.mul(reserve0).div(reserve1);
        }

        // update userInfo
        if (userInfo[_sender].deposit == 0) userInfo[_sender].lastClaim = block.timestamp;        
        userInfo[_sender].deposit = userInfo[_sender].deposit.add(_swapAmount);
        userInfo[_sender].balance = userInfo[_sender].balance.add(_out);
        // update reserves
        reserve0 = reserve0.add(_out);
        reserve1 = reserve1.add(_in);

        require(reserve0 < _totalBalance, "Not enough Magna in the contract");
        
        if (_treasuryFeeAmount > 0) {
            IERC20(usd).transfer(feeTo, _treasuryFeeAmount);
            emit SendTreasuryReward(feeTo, _treasuryFeeAmount);
        }

        IERC20(magna).transfer(trader, _out);

        emit Deposit(_sender, _swapAmount, _out);

        return (_in, _out, _treasuryFeeAmount);
    }

    /* only trader can executable
        decrease reserve0, reserve1
        update userInfo
    **/
    function _withdraw(address _sender, uint256 _amount) internal returns (uint256, uint256, uint256) {
        require(reserve0 > 0 && reserve1 > 0, "Invalid reserves");
        uint256 _in = _amount; // magna
        uint256 _out = _in.mul(reserve1).div(reserve0); // usd
        require(reserve0 > _in && reserve1 > _out, "Insufficient reserves");
        reserve0 = reserve0.sub(_in);
        reserve1 = reserve1.sub(_out);
        uint256 deposit_ = _in.mul(userInfo[_sender].deposit).div(userInfo[_sender].balance); // usd
        userInfo[_sender].deposit = userInfo[_sender].deposit.sub(deposit_);
        userInfo[_sender].balance = userInfo[_sender].balance.sub(_in);

        IERC20(usd).transfer(trader, _out);
        emit Withdraw(_sender, _in, _out);
        return (_in, _out, deposit_);
    }
}