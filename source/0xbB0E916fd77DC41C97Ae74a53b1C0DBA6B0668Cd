
// File: TokenApprovalIncentives.sol
pragma solidity 0.8.12;

import "SafeERC20.sol";
import "IERC20.sol";
import "IIncentiveVoting.sol";
import "ITokenLocker.sol";
import "IDotDotVoting.sol";


contract TokenApprovalIncentives {
    using SafeERC20 for IERC20;

    ITokenLocker public immutable epsLocker;
    IIncentiveVoting public immutable epsVoter;

    ITokenLocker public immutable dddLocker;
    IDotDotVoting public immutable dddVoter;
    address public immutable proxy;

    uint256 public immutable startTime;

    uint256 constant WEEK = 86400 * 7;

    // vote ID -> eps/ddd vote ratio
    mapping(uint256 => uint256) voteRatio;
    // vote ID -> incentive -> rewards/ddd vote ratio
    mapping(uint256 => mapping(IERC20 => uint256)) public claimRatio;
    // vote ID -> incentive -> user -> deposited amount
    mapping(uint256 => mapping(IERC20 => mapping(address => uint256))) public userDeposits;
    // vote ID -> incentive -> total deposited
    mapping(uint256 => mapping(IERC20 => uint256)) public totalDeposits;
    // vote ID -> incentive -> user -> claimed amount
    mapping(uint256 => mapping(IERC20 => mapping(address => uint256))) public userClaims;
    // vote ID -> incentive -> total claimed
    mapping(uint256 => mapping(IERC20 => uint256)) public totalClaims;
    // vote ID -> list of incentive tokens
    mapping(uint256 => IERC20[]) incentives;

    event IncentiveAdded(
        uint256 indexed voteId,
        address indexed depositor,
        IERC20 indexed reward,
        uint256 amount
    );

    event IncentiveClaimed(
        uint256 indexed voteId,
        address indexed claimer,
        IERC20 indexed reward,
        uint256 amount
    );

    event IncentiveWithdrawn(
        uint256 indexed voteId,
        address indexed depositor,
        IERC20 indexed reward,
        uint256 amount
    );

    event VoteRatioSet(
        uint256 indexed voteId,
        uint256 ratio
    );

    event ClaimRatioSet(
        uint256 indexed voteId,
        IERC20 indexed reward,
        uint256 ratio
    );

    struct IncentiveData {
        IERC20 token;
        uint256 amount;
    }

    constructor(
        ITokenLocker _epsLocker,
        IIncentiveVoting _epsVoter,
        ITokenLocker _dddLocker,
        IDotDotVoting _dddVoter,
        address _proxy
    ) {
        epsLocker = _epsLocker;
        epsVoter = _epsVoter;

        dddLocker = _dddLocker;
        dddVoter = _dddVoter;
        proxy = _proxy;
        startTime = _dddVoter.startTime();
    }

    function getIncentives(uint256 _voteId) external view returns (IncentiveData[] memory) {
        IncentiveData[] memory data = new IncentiveData[](incentives[_voteId].length);
        for (uint256 i = 0; i < data.length; i++) {
            IERC20 token = incentives[_voteId][i];
            data[i] = IncentiveData({token: token, amount: totalDeposits[_voteId][token]});
        }
        return data;
    }

    function claimableIncentives(uint256 _voteId, address _user) external view returns (IncentiveData[] memory) {
        IncentiveData[] memory data = new IncentiveData[](incentives[_voteId].length);
        uint256 votes = dddVoter.userTokenApprovalVotes(_voteId, _user);

        for (uint256 i = 0; i < data.length; i++) {
            IERC20 token = incentives[_voteId][i];
            data[i].token = token;

            uint256 deposits = totalDeposits[_voteId][token];
            uint256 ratio = claimRatio[_voteId][token];
            if (ratio == 0) {
                IIncentiveVoting.TokenApprovalVote memory vote = epsVoter.tokenApprovalVotes(_voteId);
                if (vote.givenVotes < vote.requiredVotes) continue;
                uint256 totalVotes = epsVoter.userTokenApprovalVotes(_voteId, proxy) / voteRatio[_voteId];
                ratio = deposits / totalVotes;
            }

            if (userClaims[_voteId][token][_user] == 0) {
                uint256 amount = votes * ratio;
                uint256 claims = totalClaims[_voteId][token];
                if (claims + amount > deposits) amount = deposits - claims;
                data[i].amount = amount;
            }
        }

        return data;
    }

    function addIncentive(uint256 _voteId, IERC20 _reward, uint256 _amount) external {
        require(_amount > 0, "Cannot add zero");
        IIncentiveVoting.TokenApprovalVote memory vote = epsVoter.tokenApprovalVotes(_voteId);
        require(vote.startTime > block.timestamp - WEEK, "Vote has ended");
        require(vote.givenVotes < vote.requiredVotes, "Vote has already passed");

        if (voteRatio[_voteId] == 0) {
            uint256 epsVotes = epsLocker.weeklyWeightOf(proxy, vote.week) / 1e18;
            uint256 week = (vote.startTime - startTime) / WEEK - 1;
            uint256 dddVotes = dddLocker.weeklyTotalWeight(week) / 1e18;
            voteRatio[_voteId] = epsVotes / dddVotes;
            emit VoteRatioSet(_voteId, epsVotes / dddVotes);
        }

        uint256 amount = _reward.balanceOf(address(this));
        _reward.safeTransferFrom(msg.sender, address(this), _amount);
        amount = _reward.balanceOf(address(this)) - amount;

        userDeposits[_voteId][_reward][msg.sender] += amount;
        uint256 deposits = totalDeposits[_voteId][_reward];
        totalDeposits[_voteId][_reward] = deposits + amount;
        if (deposits == 0) {
            incentives[_voteId].push(_reward);
        }
        emit IncentiveAdded(_voteId, msg.sender, _reward, amount);
    }

    function claimIncentive(uint256 _voteId, IERC20 _reward) external {
        require(userClaims[_voteId][_reward][msg.sender] == 0, "Already claimed");
        uint256 deposits = totalDeposits[_voteId][_reward];
        require(deposits > 0, "No incentive given");
        uint256 votes = dddVoter.userTokenApprovalVotes(_voteId, msg.sender);
        require(votes > 0, "Did not vote");

        if (claimRatio[_voteId][_reward] == 0) {
            IIncentiveVoting.TokenApprovalVote memory vote = epsVoter.tokenApprovalVotes(_voteId);
            require(vote.givenVotes >= vote.requiredVotes, "Vote has not passed");
            uint256 totalVotes = epsVoter.userTokenApprovalVotes(_voteId, proxy) / voteRatio[_voteId];
            claimRatio[_voteId][_reward] = deposits / totalVotes;
            emit ClaimRatioSet(_voteId, _reward, deposits / totalVotes);
        }

        // When a vote is created in one epoch week, but the first DDD vote happens in the
        // following week, the reward ratio will be calculated incorrectly. In this case
        // we pay out until the rewards run out. The best way to mitigate this is to avoid
        // creating a token approval vote in the final hours of the epoch week.
        uint256 amount = votes * claimRatio[_voteId][_reward];
        uint256 claims = totalClaims[_voteId][_reward];
        if (claims == deposits) revert("Nothing left to claim");
        else if (claims + amount > deposits) amount = deposits - claims;

        userClaims[_voteId][_reward][msg.sender] = amount;
        totalClaims[_voteId][_reward] = claims + amount;
        _reward.safeTransfer(msg.sender, amount);
        emit IncentiveClaimed(_voteId, msg.sender, _reward, amount);
    }

    function withdrawIncentive(uint256 _voteId, IERC20 _reward) external {
        IIncentiveVoting.TokenApprovalVote memory vote = epsVoter.tokenApprovalVotes(_voteId);
        require(vote.givenVotes < vote.requiredVotes, "Vote was successful");
        require(vote.startTime < block.timestamp - WEEK, "Vote has not ended");
        uint256 amount = userDeposits[_voteId][_reward][msg.sender];
        require(amount > 0, "Nothing to withdraw");

        userDeposits[_voteId][_reward][msg.sender] = 0;
        totalDeposits[_voteId][_reward] -= amount;
        _reward.safeTransfer(msg.sender, amount);
        emit IncentiveWithdrawn(_voteId, msg.sender, _reward, amount);
    }

}


// File: SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "IERC20.sol";
import "Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: IERC20.sol
// SPDX-License-Identifier: MIT

pragma solidity 0.8.12;

/**
 * Based on the OpenZeppelin IER20 interface:
 * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol
 *
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


// File: Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: IIncentiveVoting.sol
pragma solidity 0.8.12;

interface IIncentiveVoting {

    struct TokenApprovalVote {
        address token;
        uint40 startTime;
        uint16 week;
        uint256 requiredVotes;
        uint256 givenVotes;
    }

    function NEW_TOKEN_APPROVAL_VOTE_MIN_WEIGHT() external view returns (uint256);
    function startTime() external view returns (uint256);
    function availableVotes(address _user) external view returns (uint256);
    function availableTokenApprovalVotes(address _user, uint256 _voteIndex) external view returns (uint256);
    function isApproved(address _token) external view returns (bool);
    function approvedTokensLength() external view returns (uint256);
    function approvedTokens(uint256) external view returns (address);
    function tokenApprovalVotes(uint256) external view returns (TokenApprovalVote memory);
    function userTokenApprovalVotes(uint256 _voteIndex, address _user) external view returns (uint256);

    /**
        @notice Allocate votes toward LP tokens to receive emissions in the following week
        @param _tokens List of addresses of LP tokens to vote for
        @param _votes Votes to allocate to `_tokens`
     */
    function vote(address[] calldata _tokens, uint256[] calldata _votes) external;

    /**
        @notice Create a new vote to enable protocol emissions on a given token
        @param _token Token address to create a vote for
        @return _voteIndex uint Index value used to reference the vote
     */
    function createTokenApprovalVote(address _token) external returns (uint256 _voteIndex);

    /**
        @notice Vote in favor of approving a new token for protocol emissions
        @param _voteIndex Array index referencing the vote
     */
    function voteForTokenApproval(uint256 _voteIndex, uint256 _yesVotes) external;

}


// File: ITokenLocker.sol
pragma solidity 0.8.12;


interface ITokenLocker {

    function MAX_LOCK_WEEKS() external view returns (uint256);
    function getWeek() external view returns (uint256);
    function userWeight(address _user) external view returns (uint256);
    function totalWeight() external view returns (uint256);
    function weeklyWeight(address _user, uint256 _week) external view returns (uint256, uint256);
    function startTime() external view returns (uint256);
    function weeklyTotalWeight(uint256 week) external view returns (uint256);
    function weeklyWeightOf(address user, uint256 week) external view returns (uint256);

    /**
        @notice Get data on a user's active token locks
        @param _user Address to query data for
        @return lockData dynamic array of [weeks until expiration, balance of lock]
     */
    function getActiveUserLocks(address _user) external view returns (uint256[2][] memory lockData);

    /**
        @notice Allow or block third-party calls to deposit, withdraw
                or claim rewards on behalf of the caller
     */
    function setBlockThirdPartyActions(bool _block) external;

    /**
        @notice Deposit tokens into the contract to create a new lock.
        @param _user Address to create a new lock for (does not have to be the caller)
        @param _amount Amount of tokens to lock. This balance transfered from the caller.
        @param _weeks The number of weeks for the lock.
     */
    function lock(
        address _user,
        uint256 _amount,
        uint256 _weeks
    ) external returns (bool);

    /**
        @notice Extend the length of an existing lock.
        @param _amount Amount of tokens to extend the lock for.
        @param _weeks The number of weeks for the lock that is being extended.
        @param _newWeeks The number of weeks to extend the lock until.
     */
    function extendLock(
        uint256 _amount,
        uint256 _weeks,
        uint256 _newWeeks
    ) external returns (bool);

}


// File: IDotDotVoting.sol
pragma solidity 0.8.12;

interface IDotDotVoting {
    function startTime() external view returns (uint256);
    function weeklyVotes(address _user, address _token, uint256 _week) external view returns (uint256, uint256);
    function userTokenApprovalVotes(uint256 _id, address _user) external view returns (uint256);
}

