// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.0;

contract UserProfile {
    struct Profile {
        string name;
        string bio;
        address[] friends;
        mapping(address => string[]) messages;
    }
    
    mapping(address => Profile) public profiles;

    event ProfileCreated(address indexed user, string name, string bio);
    event MessageSent(address indexed sender, address indexed recipient, string message);

    function createProfile(string memory name, string memory bio) public {
        Profile storage profile = profiles[msg.sender];
        profile.name = name;
        profile.bio = bio;
        
        emit ProfileCreated(msg.sender, name, bio);
    }

    function sendMessage(address recipient, string memory message) public {
        require(recipient != address(0), "Invalid recipient");
        require(bytes(message).length > 0, "Message cannot be empty");

        Profile storage senderProfile = profiles[msg.sender];
        senderProfile.messages[recipient].push(message);
        
        Profile storage recipientProfile = profiles[recipient];
        recipientProfile.messages[msg.sender].push(message);

        emit MessageSent(msg.sender, recipient, message);
    }

    function getProfile(address user) public view returns (string memory name, string memory bio, address[] memory friends) {
        Profile storage profile = profiles[user];
        return (profile.name, profile.bio, profile.friends);
    }

    function getMessages(address sender, address recipient) public view returns (string[] memory) {
        Profile storage profile = profiles[sender];
        return profile.messages[recipient];
    }
}