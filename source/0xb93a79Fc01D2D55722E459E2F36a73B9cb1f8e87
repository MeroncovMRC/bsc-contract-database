// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**

Math operations with safety checks
*/
contract SafeMath {
function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
uint256 c = a * b;
require(a == 0 || c / a == b, "Multiplication overflow");
return c;
}
function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
require(b > 0, "Division by zero");
uint256 c = a / b;
require(a == b * c + a % b, "Division overflow");
return c;
}

function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
require(b <= a, "Subtraction overflow");
return a - b;
}

function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
uint256 c = a + b;
require(c >= a && c >= b, "Addition overflow");
return c;
}
}

contract RUFE is SafeMath {
string public name;
string public symbol;
uint8 public decimals;
uint256 public totalSupply;
address public owner;
mapping (address => uint256) public balanceOf;
mapping (address => mapping (address => uint256)) public allowance;

event Transfer(address indexed from, address indexed to, uint256 value);
event Burn(address indexed from, uint256 value);

constructor(
    uint256 initialSupply,
    string memory tokenName,
    uint8 decimalUnits,
    string memory tokenSymbol
) {
    balanceOf[msg.sender] = initialSupply;
    totalSupply = initialSupply;
    name = tokenName;
    symbol = tokenSymbol;
    decimals = decimalUnits;
    owner = msg.sender;
}

function transfer(address _to, uint256 _value) public returns (bool success) {
    require(_to != address(0), "Transfer to zero address");
    require(_value > 0, "Transfer amount must be greater than zero");
    require(balanceOf[msg.sender] >= _value, "Insufficient balance");
    require(balanceOf[_to] + _value >= balanceOf[_to], "Overflow detected");
    balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);
    balanceOf[_to] = safeAdd(balanceOf[_to], _value);
    emit Transfer(msg.sender, _to, _value);
    return true;
}

function approve(address _spender, uint256 _value) public returns (bool success) {
    require(_value > 0, "Approval amount must be greater than zero");
    allowance[msg.sender][_spender] = _value;
    return true;
}

function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    require(_to != address(0), "Transfer to zero address");
    require(_value > 0, "Transfer amount must be greater than zero");
    require(balanceOf[_from] >= _value, "Insufficient balance");
    require(balanceOf[_to] + _value >= balanceOf[_to], "Overflow detected");
    require(_value <= allowance[_from][msg.sender], "Insufficient allowance");
    balanceOf[_from] -= _value;
    balanceOf[_to] += _value;
    allowance[_from][msg.sender] -= _value;

    emit Transfer(_from, _to, _value);
    return true;
}

    // Burn function to decrease token supply
    function burn(uint256 _value) public returns (bool success) {
    require(balanceOf[msg.sender] >= _value, "Insufficient balance");
    balanceOf[msg.sender] -= _value;
    totalSupply -= _value;
    emit Burn(msg.sender, _value);
    return true;
    }

    }