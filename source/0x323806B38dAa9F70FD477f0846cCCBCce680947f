
// File: contracts/lending/PositionBondRouter.sol
/**
 * @author Musket
 */
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./PositionBondLending.sol";


contract PositionBondRouter is ReentrancyGuard, Ownable {
    function purchaseBondLending(uint256 bondAmount, address bondAddress ) external payable nonReentrant {
        address user = msg.sender;
        uint256 faceAmount = IPositionBondLending(bondAddress).purchaseBondLending{value : msg.value}(bondAmount, user);

        (address faceAsset, uint256 faceAssetType) = faceAssetAndType(bondAddress);

        // 0 is token
        if ( faceAssetType == 0) {
            IERC20(faceAsset).transferFrom(user, bondAddress, faceAmount);
        }else if ( faceAssetType == 2) {
            // 2 is ether
            require (msg.value >=  faceAmount, "Not enough face amount");
        }
    }

    function faceAssetAndType(address bondAddress) public view returns (address, uint256) {
        return IPositionBondLending(bondAddress).getFaceAssetAndType();
    }
}


// File: @openzeppelin/contracts/security/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/lending/PositionBondLending.sol
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "../impl/Issuer.sol";
import "../impl/lending/UnderlyingAssetLending.sol";
import "../impl/lending/FaceAssetLending.sol";
import "../impl/SaleStrategyBase.sol";
import "../impl/PositionAdmin.sol";
import "../impl/lending/LoanRatio.sol";

import "../interfaces/IPositionBondFunction.sol";
import "../interfaces/IPositionBondLending.sol";
import "../impl/lending/BondStatusLending.sol";
import "../impl/lending/BondUnitLending.sol";

contract PositionBondLending is
    Issuer,
    BondStatusLending,
    UnderlyingAssetLending,
    FaceAssetLending,
    BondUnitLending,
    IPositionBondLending,
    LoanRatio,
    ReentrancyGuard
{
    IPositionBondFunction private positionBondFunction;
    bool private initialized;
    uint256 public fee;
    address public positionAdmin;
    uint256 public soldAmount;
    address public bondRouter;

    modifier onlyBondRouter() {
        require(msg.sender == bondRouter,  "onlyBondRouter" );
        _;
    }

    function bondInitialize(
        BondInformation memory bondInformation,
        AssetInformation memory assetInformation,
        BondSetup memory bondSetup,
        address issuer_
    ) external nonReentrant {
        require(!initialized, "!init");
        initialized = true;

        positionBondFunction = bondSetup.positionBondFunction;
        LoanRatio.initChainLinkPriceFeed(bondSetup.chainLinkPriceFeed);
        positionAdmin = bondSetup.positionAdmin;
        fee = bondSetup.fee;
        UnderlyingAssetLending.updateUnderlyingAmount(assetInformation.collateralAmount);
        bondRouter = bondSetup.bondRouter;
        setIssuer(issuer_);


        UnderlyingAssetLending.initUnderlyingAssetLending(
            assetInformation.underlyingAssetType,
            assetInformation.underlyingAsset,
            assetInformation.collateralAmount,
            assetInformation.nftIds
        );

        FaceAssetLending.initFaceAssetLending(
            assetInformation.faceAssetType,
            assetInformation.faceAsset,
            assetInformation.faceValue,
            bondInformation.issuePrice
        );

        LoanRatio.initLoanLoanRatio(
            assetInformation.priceFeedKeyUnderlyingAsset,
            assetInformation.priceFeedKeyFaceAsset
        );


        BondUnitLending.initBondUnit(
            bondInformation.bondSupply,
            bondInformation.bondName,
            bondInformation.bondSymbol
        );

        BondStatusLending.setDuration(bondInformation.duration);
        BondStatusLending.active(
            bondInformation.startSale,
            bondInformation.active,
            bondInformation.active + getDuration()
        );
    }

    function isNotReachMaxLoanRatio() public view override returns (bool) {

        uint256 bondAmountInPhase = BondStatusLending.getStatus() ==
            Status.Pending
            ? bondSupply
            : totalSupply();
        return
            LoanRatio.isNotReachMaxLoanRatio(
                UnderlyingAssetLending._underlyingAssetAmount(),
                (FaceAssetLending.getIssuePrice() * bondAmountInPhase) /
                    (10**18)
            );
    }

    // If underlyingAsset is Tokens or Ether,  amountsRemoved must be format [123*10**18], only one element
    // and the value is amount issuer want to remove
    // If underlyingAsset is NFT, amountsRemoved must be format [1,3,5]. These are indexes of NFTs issuer want to remove
    function removeCollateral(uint256[] calldata amountsRemoved)
        public
        onlyIssuer
        onlyOnSaleOrActive
        nonReentrant
    {
        uint256 totalAmountRemoved = positionBondFunction
            .verifyRemoveCollateral(
                amountsRemoved,
                UnderlyingAssetLending.getNfts(),
                UnderlyingAssetLending._underlyingAssetAmount(),
                getUnderlyingAssetType()
            );
        require(totalAmountRemoved > 0, "!AmountRemove");
        require(
            LoanRatio.isNotReachMaxLoanRatio(
                UnderlyingAssetLending._underlyingAssetAmount() -
                    totalAmountRemoved,
                (FaceAssetLending.getIssuePrice() * totalSupply()) / (10**18)
            ),
            "!Remove"
        );
        UnderlyingAssetLending._removeCollateral(
            amountsRemoved,
            totalAmountRemoved
        );
        emit CollateralRemoved(totalAmountRemoved);
    }

    function addCollateral(uint256[] calldata amountTransferAdded)
        public
        payable
        onlyIssuer
        onlyOnSaleOrActive
        nonReentrant
    {
        uint256 _underlyingAssetType = getUnderlyingAssetType();
        require(
            positionBondFunction.verifyAddCollateral(
                amountTransferAdded,
                _underlyingAssetType
            ),
            "!pass"
        );
        uint256 amountAdded;
        if (_underlyingAssetType == 0) {
            amountAdded = amountTransferAdded[0];
        } else if (_underlyingAssetType == 1) {
            amountAdded = positionBondFunction.getParValue(amountTransferAdded);
        } else if (_underlyingAssetType == 2) {
            amountAdded = msg.value;
        }
        UnderlyingAssetLending._addCollateral(amountTransferAdded, amountAdded);
        emit CollateralAdded(amountAdded);
    }

    function cancel() public onlyIssuer onlyPending nonReentrant {
        BondStatusLending._setUnderlyingAssetCanceled();
        UnderlyingAssetLending.claimUnderlyingAsset();
        emit BondCanceled(issuer());
    }

    /**
     * @dev see {IPositionBondLending-claimUnderlyingAsset}
     */
    function claimUnderlyingAsset()
        public
        override(IPositionBondLending, UnderlyingAssetLending)
        onlyIssuer
    {
        if ( totalSupply() == 0) {
            require(
                BondStatusLending.getStatus() == Status.Active
                || BondStatusLending.getStatus() == Status.Matured,
                "!Claim"
            );
            UnderlyingAssetLending.claimUnderlyingAsset();
            BondStatusLending._setUnderlyingAssetStatusRefunded();
            BondStatusLending.matured();
        } else {
            require(BondStatusLending._isReadyToClaim(), "!claim");
            UnderlyingAssetLending.claimUnderlyingAsset();
            BondStatusLending._setUnderlyingAssetStatusRefunded();
            BondStatusLending.matured();
        }
    }

    function claimLiquidatedUnderlyingAsset() public onlyLiquidated {
        uint256 _bondBalance = balanceOf(msg.sender);
        require(_bondBalance != 0, "!balance");
        UnderlyingAssetLending._transferUnderlyingAssetLiquidated(
            _bondBalance,
            totalSupply()
        );
        _burn(msg.sender, _bondBalance);
    }

    /// @dev see {IPositionBondLending-claimSoldAmount}
    function claimSoldAmount(uint256 amount)
        external
        virtual
        onlyIssuer
        nonReentrant
    {
        require(getStatus() != Status.Pending && getStatus() != Status.OnSale, "!claimSold");
        uint256 maxClaim =  ((totalSupply() * getIssuePrice())/ 10 ** 18);
        require(
            totalSoldAmountClaimed <= maxClaim,
            "!claim"
        );

        uint256 minClaim =  FaceAssetLending.getBalanceFaceAmount();
        uint256 amountClaim = minClaim >= maxClaim ? maxClaim : minClaim;
        totalSoldAmountClaimed += amountClaim;

        uint256 fee = calculateFee(amountClaim);
        FaceAssetLending._transferOut(amountClaim - fee, msg.sender);
        if (fee > 0) {
            FaceAssetLending._transferOut(fee, positionAdmin);
        }
        emit SoldAmountClaimed(msg.sender, amountClaim);
    }

    /**
     * @dev see {IPositionBond-claimFaceValue}
     */
    function claimFaceValue()
        external
        onlyMatured
        onlyReadyToClaimFaceValue
        nonReentrant
    {
        uint256 _bondBalance = balanceOf(msg.sender);
        require(_bondBalance != 0, "!balance");
        _burn(msg.sender, _bondBalance);
        FaceAssetLending._transferFaceValueOut(_bondBalance);
    }

    /**
     * @dev see {IPositionBond-purchase}
     */
    function purchaseBondLending(uint256 bondAmount, address recipient)
        external
        payable
        onlyOnSale
        onlyBondRouter
        notIssuer(recipient)
        nonReentrant
        returns (uint256)
    {
         uint256 _faceAmount = getFaceAmount(bondAmount);
        require(_faceAmount != 0 && bondAmount != 0, "!bond");
        BondUnitLending._mint(recipient, bondAmount);
        _afterPurchase(recipient, bondAmount);
        soldAmount += bondAmount;
        emit Purchased(recipient, _faceAmount, bondAmount);
        return _faceAmount;
    }

    function repayBondLending() external payable virtual onlyIssuer onlyActive {
        FaceAssetLending._transferRepaymentFaceValue(totalSupply());
        BondStatusLending._setUnderlyingAssetStatusReadyToClaim();
        // claim underlying asset in one transaction
        claimUnderlyingAsset();
    }

    /// @dev see {IPositionBond-liquidate}
    function liquidate() external nonReentrant {
        require(isCanLiquidate(), "!Liquidate");
        if (getUnderlyingAssetType() == 1) {
            (address underlyingAsset, ) = UnderlyingAssetLending
                .underlyingAsset();
            address tokenMapped = positionBondFunction.getTokenMapped(
                underlyingAsset
            );
            uint256 balanceBefore = IERC20(tokenMapped).balanceOf(
                address(this)
            );
            UnderlyingAssetLending.decompose(
                address(
                    positionBondFunction.getPosiNFTFactory()
                ),
                positionBondFunction.getTokenMapped(underlyingAsset)
            );
            UnderlyingAssetLending.updateUnderlyingAmount(
                IERC20(tokenMapped).balanceOf(address(this)) - balanceBefore
            );
        }

        BondStatusLending._setUnderlyingAssetStatusLiquidated();
        emit Liquidated(address(this), msg.sender, issuer());
    }

    /**
     *
     *      VIEW FUNCTIONS
     *
     */
    function isPurchasable(address caller) public view virtual returns (bool) {}

    function isCanLiquidate() public view returns (bool) {
        if (
            BondStatusLending.getUnderlyingAssetStatus() ==
            UnderlyingAssetStatus.ReadyToClaim ||
            BondStatusLending.getUnderlyingAssetStatus() ==
            UnderlyingAssetStatus.Liquidated ||
            BondStatusLending.getUnderlyingAssetStatus() ==
            UnderlyingAssetStatus.Refunded ||
            totalSupply() == 0
        ) {
            return false;
        }
        return
            (BondStatusLending._isMatured() ||
                LoanRatio.isLiquidate(
                    UnderlyingAssetLending._underlyingAssetAmount(),
                    FaceAssetLending._amountLending(totalSupply())
                ))
                ? true
                : false;
    }

    function faceAmount(address account) public view returns (uint256) {
        return FaceAssetLending._calculateFaceValueOut(balanceOf(account));
    }

    function getBondAmount(uint256 amount)
        public
        view
        virtual
        returns (uint256, uint256)
    {
        return (
            BondMath.calculateBondAmountWithFixPrice(
                amount,
                FaceAssetLending.getIssuePrice()
            ),
            amount
        );
    }

    function getFaceAmount(uint256 bondAmount) public view virtual  returns ( uint256){
        return BondMath.calculateFaceValue(bondAmount, FaceAssetLending.getIssuePrice());
    }

    function getFaceAssetAndType() external view returns (address faceAsset, uint256 faceAssetType) {
        return(FaceAssetLending.faceAsset(), FaceAssetLending.getFaceAssetType());
    }

    function getLoanRatio() public view returns (uint256) {
        return
            LoanRatio._getLoanRatio(
                UnderlyingAssetLending._underlyingAssetAmount(),
                FaceAssetLending._amountLending(totalSupply())
            );
    }

    /**
     *
     *      INTERNAL FUNCTIONS
     *
     */

    function calculateFee(uint256 amount) internal view returns (uint256) {
        return (amount * fee) / 10_000;
    }

    function _transferUnderlyingAsset()
        internal
        override(UnderlyingAssetLending, BondStatusLending)
    {}

    function _issuer() internal view override returns (address) {
        return issuer();
    }

    function _bondTransferable()
        internal
        override(BondUnitLending, BondStatusLending)
        returns (bool)
    {
        return BondStatusLending._bondTransferable();
    }

    /// @dev Hook function
    function _afterPurchase(address _buyer, uint256 _bondAmount)
        internal
        virtual
    {
        if (totalSupply() == bondSupply) {
            _updateTimePhase();
        }
    }
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


// File: contracts/impl/Issuer.sol
pragma solidity ^0.8.9;

abstract contract Issuer {
    address private _issuer;
    event IssuerChanged(address oldIssuer, address newIssuer);

    modifier onlyIssuer() {
        require(msg.sender == _issuer, "only issuer");
        _;
    }

    modifier notIssuer(address recipient) {
        require(recipient != _issuer, "not issuer");
        _;
    }

    constructor() {
        _issuer = msg.sender;
    }

    function issuer() public view virtual returns (address) {
        return _issuer;
    }

    function setIssuer(address issuer_) internal {
        _issuer = issuer_;
    }

}

// File: contracts/impl/lending/UnderlyingAssetLending.sol
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {Issuer} from "../Issuer.sol";

import {BondMath} from "../../lib/BondMath.sol";
import {BondTransfer} from "../../lib/BondTransfer.sol";
import "../../interfaces/IPosiNFTFactory.sol";

abstract contract UnderlyingAssetLending {
    using SafeERC20 for IERC20;

    event LiquidationUnderlyingAssetClaimed(
        address user,
        uint256 bondAmount,
        uint256 collateralAmount
    );

    address private _underlyingAsset;

    uint256[] private _posiNFTsID;

    // collateral
    uint256 private _underlyingAmount;

    // not sub
    uint256 public initUnderlyingAmount;

    // 0 is Token, 1 is PosiNFT, 2 is Ether
    uint256 private underlyingAssetType;


    function initUnderlyingAssetLending(
        uint256 underlyingAssetType_,
        address underlyingAsset_,
        uint256 underlyingAmount_,
        uint256[] memory posiNFTsID_
    ) internal {
        underlyingAssetType = underlyingAssetType_;
        _underlyingAsset = underlyingAsset_;
        _posiNFTsID = posiNFTsID_;
    }

    function claimUnderlyingAsset() public virtual {
        _transferOut1(_underlyingAmount);
    }

    function underlyingAsset() public view virtual returns (address, uint256) {
        return (_underlyingAsset, _underlyingAmount);
    }

    function _underlyingAssetAmount() internal view virtual returns (uint256) {
        return _underlyingAmount;
    }

    function getUnderlyingAssetType() public view virtual returns (uint256) {
        return underlyingAssetType;
    }

    function getNfts() public view virtual returns (uint256[] memory) {
        return _posiNFTsID;
    }

    function _addCollateral(
        uint256[] memory amountTransferAdded,
        uint256 amountAdded
    ) internal virtual {
        if (underlyingAssetType == 0) {
            uint256 balanceBefore = IERC20(_underlyingAsset).balanceOf(
                address(this)
            );
            BondTransfer._transferInToken(
                _underlyingAsset,
                amountTransferAdded[0],
                msg.sender
            );
            amountAdded =
                IERC20(_underlyingAsset).balanceOf(address(this)) -
                balanceBefore;
        } else if (underlyingAssetType == 1) {
            require(
                amountTransferAdded.length + _posiNFTsID.length <= 30,
                "!NFT"
            );
            BondTransfer._transferInPosiNFTs(
                _underlyingAsset,
                amountTransferAdded,
                msg.sender
            );
            for (uint256 i = 0; i < amountTransferAdded.length; i++) {
                _posiNFTsID.push(amountTransferAdded[i]);
            }
        } else if (underlyingAssetType == 2) {
            require(msg.value >= amountAdded, "!ether");
        }
        _underlyingAmount += amountAdded;
        initUnderlyingAmount += amountAdded;
    }

    function _removeCollateral(
        uint256[] memory amountTransferRemoved,
        uint256 amountRemoved
    ) internal virtual {
        if (underlyingAssetType == 0) {
            _transferOut1(amountRemoved);
        } else if (underlyingAssetType == 1) {
            uint256[] memory nftIdsRemoved = new uint256[](
                amountTransferRemoved.length
            );
            for (uint256 i = 0; i < amountTransferRemoved.length; i++) {
                nftIdsRemoved[i] = _posiNFTsID[amountTransferRemoved[i]];
                _posiNFTsID[amountTransferRemoved[i]] = 0;
            }
            for (uint256 i = 0; i < nftIdsRemoved.length; i++) {
                IERC721(_underlyingAsset).safeTransferFrom(
                    address(this),
                    msg.sender,
                    nftIdsRemoved[i]
                );
            }
            uint256[] memory nftIdsPop = new uint256[](
                _posiNFTsID.length - amountTransferRemoved.length
            );

            uint256 index = 0;
            for (uint256 i = 0; i < _posiNFTsID.length; i++) {
                if (_posiNFTsID[i] != 0) {
                    nftIdsPop[index] = _posiNFTsID[i];
                    index++;
                }
            }

            _posiNFTsID = nftIdsPop;
        }
//        else if (underlyingAssetType == 2) {
//            _transferOut1(amountTransferRemoved[0]);
//        }
        _underlyingAmount -= amountRemoved;
        initUnderlyingAmount -= amountRemoved;
    }

    function _transferUnderlyingAsset() internal virtual {}

    function _issuer() internal view virtual returns (address) {}

    function _transferUnderlyingAssetLiquidated(
        uint256 bondBalance,
        uint256 bondSupply
    ) internal {
        uint256 calculatedUnderlyingAsset = BondMath.calculateUnderlyingAsset(
            bondBalance,
            bondSupply,
            _underlyingAmount
        );
        _underlyingAmount -= calculatedUnderlyingAsset;
        _transferOut1(calculatedUnderlyingAsset);
        emit LiquidationUnderlyingAssetClaimed(
            msg.sender,
            bondBalance,
            calculatedUnderlyingAsset
        );
    }

    function _transferOut1(uint256 amount) internal {
        if (underlyingAssetType == 0) {
            BondTransfer._transferOutToken(
                _underlyingAsset,
                amount,
                msg.sender
            );
        } else if (underlyingAssetType == 1) {
            BondTransfer._transferOutPosiNFT(
                _underlyingAsset,
                _posiNFTsID,
                msg.sender
            );
        }
//        else if (underlyingAssetType == 2) {
//            BondTransfer._transferOutEther(msg.sender, amount);
//        }
    }

    function decompose(address positionFactory, address tokenPar) internal {
        IERC721(_underlyingAsset).setApprovalForAll(
            address(positionFactory),
            true
        );
        for (uint256 i = 0; i < _posiNFTsID.length; i++) {
            bool done = IPosiNFTFactory(positionFactory).burn(_posiNFTsID[i]);
        }
        underlyingAssetType = 0;
        _underlyingAsset = tokenPar;
    }

    function updateUnderlyingAmount(uint256 underlyingAmount_) internal {
        _underlyingAmount = underlyingAmount_;
        initUnderlyingAmount = underlyingAmount_;
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4) {
        return
            bytes4(
                keccak256("onERC721Received(address,address,uint256,bytes)")
            );
    }
}


// File: contracts/impl/lending/FaceAssetLending.sol
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {BondMath} from "../../lib/BondMath.sol";
import {BondTransfer} from "../../lib/BondTransfer.sol";

abstract contract FaceAssetLending {
    using SafeERC20 for IERC20;

    event FaceValueClaimed(address user, uint256 amount);
    event FaceValueDeposited(uint256 amount);
    event FaceValueRepaid(
        uint256 amount,
        uint256 bondAmount,
        uint256 faceValue
    );

    uint256 public totalSoldAmountClaimed;

    address private _faceAsset;
    uint256 private _faceValue;
    uint256 private _issuePrice;

    // 0 is Token, 1 is PosiNFT, 2 is Ether
    uint256 private faceAssetType;

    function initFaceAssetLending(
        uint256 faceAssetTypeType_,
        address faceAsset_,
        uint256 faceValue_,
        uint256 issuePrice_) internal {
        require(
            faceAssetTypeType_ == 0,
            "!supported"
        );

        faceAssetType = faceAssetTypeType_;
        _faceAsset = faceAsset_;
        _faceValue = faceValue_;
        _issuePrice = issuePrice_;

    }

    function _transferIn(uint256 amount) internal virtual {
        if (faceAssetType == 0) {
            if (amount > 0) {
                IERC20(_faceAsset).safeTransferFrom(
                    msg.sender,
                    address(this),
                    amount
                );
            }

        } else {
            require(msg.value >= amount, "!amount");
        }
    }

    function getFaceAssetType() public view virtual returns (uint256) {
        return faceAssetType;
    }

    function faceAsset() public view virtual returns (address) {
        return _faceAsset;
    }

    function faceValue() public view virtual returns (uint256) {
        return _faceValue;
    }

    function _calculateFaceValueOut(uint256 bondAmount)
        internal
        view
        virtual
        returns (uint256)
    {
        return BondMath.calculateFaceValue(bondAmount, faceValue());
    }

    function _balanceOf() internal view virtual returns (uint256) {
        return IERC20(_faceAsset).balanceOf(address(this));
    }

    /// @dev Calculate the face value and transfer in
    /// inherit contract must implement
    /// @param totalSupply The bond amount
    function _transferRepaymentFaceValue(uint256 totalSupply) internal virtual {
        uint256 calculatedFaceValue = BondMath.calculateFaceValue(
            totalSupply,
            faceValue()
        );
        _transferIn(calculatedFaceValue);
        if (faceAssetType == 0) {
            // issuer needs cover any losses due to transfer token from issuer -> contract
            // if the transaction reverted with the following reason
            // issuer needs manually transfer the token to cover losses before repay the face value
            require(
                IERC20(_faceAsset).balanceOf(address(this)) >=
                    calculatedFaceValue,
                "need to cover deflection fees"
            );
        }

        emit FaceValueRepaid(calculatedFaceValue, totalSupply, _faceValue);
    }

    /// @dev Calculate the face value and transfer in
    /// inherit contract must implement
    /// @param bondAmount The bond amount
    function _transferFaceValueOut(uint256 bondAmount) internal virtual {
        uint256 calculatedFaceValue = BondMath.calculateFaceValue(
            bondAmount,
            faceValue()
        );
        _transferOut(calculatedFaceValue, msg.sender);
        emit FaceValueClaimed(msg.sender, calculatedFaceValue);
    }

    function _transferOut(uint256 amount, address to) internal {
        BondTransfer._transferOutToken(_faceAsset, amount, to);
    }

    function _amountLending(uint256 _bondAmount)
        internal
        view
        returns (uint256)
    {
        return ((_bondAmount * _issuePrice)) / 10**18;
    }

    function getIssuePrice() public view returns (uint256) {
        return _issuePrice;
    }

    function getBalanceFaceAmount() internal view returns (uint256) {
        return IERC20(_faceAsset).balanceOf(address(this));
    }
}


// File: contracts/impl/SaleStrategyBase.sol
pragma solidity ^0.8.9;

/// @title A title that should describe the contract/interface
/// @author The name of the author
/// @notice Explain to an end user what this does
/// @dev Explain to a developer any extra details
abstract contract SaleStrategyBase {
    /// @dev Can purchase the bond? The inherit contract must implement
    function canPurchase() public view virtual returns (bool);

    /// @dev Get the issue price, inherit contract must implement
    /// @return the issue price
    function issuePrice() public view virtual returns (uint256);

    /// @dev Calculate the bond amount returns to purchaser base on purchase amount.
    /// inherit contract must implement
    /// @param amount The "face asset" amount
    /// @return bondAmount and faceAmount
    function getBondAmount(uint256 amount)
        public
        view
        virtual
        returns (uint256 bondAmount, uint256 faceAmount);

    modifier purchasable() {
        require(canPurchase(), "not purchasable");
        _;
    }
}


// File: contracts/impl/PositionAdmin.sol
pragma solidity ^0.8.9;

abstract contract PositionAdmin {
    address public positionAdmin;

    function initAdmin(address newAdmin) internal virtual {
        positionAdmin = newAdmin;
    }
}


// File: contracts/impl/lending/LoanRatio.sol
/**
 * @author Musket
 */
pragma solidity ^0.8.9;

import "../../interfaces/IChainLinkPriceFeed.sol";

abstract contract LoanRatio {
    uint256 public liquidateRate;
    uint256 public maxLoanRatio;
    uint256 public twapInterval;

    bytes32 private priceFeedKeyUnderlyingAsset;
    bytes32 private priceFeedKeyFaceAsset;

    IChainLinkPriceFeed chainLinkPriceFeed;

    function initLoanLoanRatio(
        bytes32 priceFeedKeyUnderlyingAsset_,
        bytes32 priceFeedKeyFaceAsset_
    ) internal {
        priceFeedKeyUnderlyingAsset = priceFeedKeyUnderlyingAsset_;
        priceFeedKeyFaceAsset = priceFeedKeyFaceAsset_;
        liquidateRate = 8_000;
        maxLoanRatio = 6_500;
        twapInterval = 3 * 24 * 3600;
    }


    function initChainLinkPriceFeed(address chainLinkPriceFeed_) internal {
        chainLinkPriceFeed = IChainLinkPriceFeed(chainLinkPriceFeed_);
    }

    function _getLoanRatio(
        uint256 amountUnderlyingAsset,
        uint256 amountFaceAsset
    ) internal view returns (uint256) {
        if (amountUnderlyingAsset == 0 || amountFaceAsset == 0) {
            return 0;
        }
        return
            (chainLinkPriceFeed.getTwapPrice(
                priceFeedKeyFaceAsset,
                twapInterval
            ) *
                amountFaceAsset *
                10_000) /
            (chainLinkPriceFeed.getTwapPrice(
                priceFeedKeyUnderlyingAsset,
                twapInterval
            ) * amountUnderlyingAsset);
    }

    function isLiquidate(uint256 amountUnderlyingAsset, uint256 amountFaceAsset)
        internal
        view
        returns (bool)
    {
        return
            _getLoanRatio(amountUnderlyingAsset, amountFaceAsset) >=
            liquidateRate;
    }

    function isNotReachMaxLoanRatio(
        uint256 amountUnderlyingAsset,
        uint256 amountFaceAsset
    ) internal view returns (bool) {
        uint256 loanRatio = _getLoanRatio(
            amountUnderlyingAsset,
            amountFaceAsset
        );
        return loanRatio <= maxLoanRatio && loanRatio > 0;
    }
}


// File: contracts/interfaces/IPositionBondFunction.sol
pragma solidity ^0.8.0;

import "../lending/PositionBondLending.sol";

interface IPositionBondFunction {
    function verifyRequire(
        PositionBondLending.BondInformation memory bondInformation,
        PositionBondLending.AssetInformation memory assetInformation
    ) external view returns (bool);

    function verifyAddCollateral(
        uint256[] memory amountTransferAdded,
        uint256 underlyingAssetType
    ) external view returns (bool);

    function verifyRemoveCollateral(
        uint256[] memory amountTransferRemoved,
        uint256[] memory nftIds,
        uint256 underlyingAmount,
        uint256 underlyingAssetType
    ) external view returns (uint256);

    function getTokenMapped(address nft) external view returns (address);

    function getPosiNFTFactory() external view returns (address);

    function getParValue(uint256[] memory nftIds)
        external
        view
        returns (uint256 totalParAmount);
}


// File: contracts/interfaces/IPositionBondLending.sol
pragma solidity ^0.8.9;

import "./IPositionBondFunction.sol";

interface IPositionBondLending {
    struct BondInformation {
        string bondName;
        string bondSymbol;
        string description;
        uint256 bondSupply;
        uint64 startSale;
        uint64 active;
        uint64 duration;
        uint256 issuePrice;
    }

    struct AssetInformation {
        address underlyingAsset;
        uint256 collateralAmount;
        address faceAsset;
        uint256 faceValue;
        uint256 underlyingAssetType;
        uint256 faceAssetType;
        uint256[] nftIds;
        bytes32 priceFeedKeyUnderlyingAsset;
        bytes32 priceFeedKeyFaceAsset;
    }
    struct BondSetup{
        IPositionBondFunction positionBondFunction;
        address chainLinkPriceFeed;
        address positionAdmin;
        uint256 fee;
        address bondRouter;
    }

    event SoldAmountClaimed(address issuer, uint256 amount);
    event Purchased(address user, uint256 faceAmount, uint256 bondAmount);
    event Liquidated(address bondAddress, address caller, address issuer);

    event BondCanceled(address issuer);
    event CollateralAdded(uint256 amountAdded);
    event CollateralRemoved(uint256 amountRemoved);

    /// @notice When the bond is matured, Issuer claim underlying asset
    /// @dev check only issuer, only the bond is matured
    /**
     * Requirements:
     *
     * - Caller must be the issuer
     * - Only Matured
     * - Only issuer pay back the face value
     */
    function claimUnderlyingAsset() external;

    /// @notice When the bond is matured, and liquidated every user can claim underlying asset
    /// @dev check the bond is liquidated
    function claimLiquidatedUnderlyingAsset() external;

    /// @notice When the bond is active, issuer need claim the sold amount
    /// Requirements:
    /// - Bond is activated
    function claimSoldAmount(uint256 amount) external;

    /// @notice When the bond is matured, investor must claim back the face value
    /// buy transfer the bond unit and returns the face amount
    /// @dev Get back the bond token, and transfer face asset to caller
    /// Requirements
    /// - The bond must be matured
    function claimFaceValue() external;

    /// @notice Liquidate issuer underlying asset
    /// Requirements:
    /// - The bond must be matured
    /// - Issuer not pay the face value after a certain time
    function liquidate() external;

    function isPurchasable(address caller) external view returns (bool);

    function bondInitialize(
        BondInformation memory bondInformation,
        AssetInformation memory assetInformation,
        BondSetup memory bondSetup,
        address issuer_
    ) external;

    function isNotReachMaxLoanRatio() external view returns (bool);

    function purchaseBondLending(uint256 bondAmount, address recipient) external payable returns (uint256);

    function getFaceAssetAndType() external view returns (address faceAsset, uint256 faceAssetType);

}


// File: contracts/impl/lending/BondStatusLending.sol
pragma solidity ^0.8.9;

import "../../lib/Timers.sol";

abstract contract BondStatusLending {
    using Timers for Timestamp;
    event TimePhaseUpdated(uint64 active, uint64 maturity);
    event BondMatured(uint256 maturity);
    enum Status {
        Pending,
        OnSale,
        Active,
        Matured,
        Commit,
        Distribution,
        Canceled,
        Liquidated
    }

    enum UnderlyingAssetStatus {
        Pending,
        OnHold,
        Liquidated,
        ReadyToClaim,
        Refunded,
        Canceled
    }

    struct StatusData {
        // packed slot
        // timestamp
        Timestamp startSale;
        Timestamp active;
        Timestamp maturity;
        Timestamp commit;
        Timestamp distribution;
        // end timestamp
        uint8 underlyingAssetStatus; // 0: pending, 1: on hold, 2: liquidated, 3: ready to claim, 4: refunded, 5: Canceled
    }

    StatusData private statusData;

    Timestamp private duration;

    modifier onlyOnSaleOrActive() {
        require(_isOnSale() || _isActive(), "only on sale or active");
        _;
    }

    modifier onlyPending() {
        require(_isPending(), "only pending");
        _;
    }

    modifier onlyCanceled() {
        require(_isCanceled(), "only canceled");
        _;
    }

    modifier onlyOnSale() {
        require(_isOnSale(), "only on sale");
        _;
    }

    modifier onlyActive() {
        require(_isActive(), "only active");
        _;
    }

    modifier onlyMatured() {
        require(_isMatured(), "only matured");
        _;
    }


    modifier onlyReadyToClaimFaceValue() {
        require(
            _isReadyToClaim() || _isRefunded(),
            "only ready to claim face value"
        );
        _;
    }

    modifier onlyLiquidated() {
        require(_isLiquidated(), "only liquidated");
        _;
    }

    function getStatus() public view virtual returns (Status) {
        //save gas
        StatusData memory _statusData = statusData;
        if (_statusData.underlyingAssetStatus == 0) {
            return Status.Pending;
        } else if (_statusData.underlyingAssetStatus == 2) {
            return Status.Liquidated;
        } else if (_statusData.underlyingAssetStatus == 5) {
            return Status.Canceled;
        } else {
            if (_statusData.maturity.passed(_now())) {
                return Status.Matured;
            }
            if (_statusData.active.passed(_now())) {
                return Status.Active;
            }
            if (_statusData.startSale.passed(_now())) {
                return Status.OnSale;
            }
            return Status.Pending;
        }
    }

    function getUnderlyingAssetStatus()
        public
        view
        virtual
        returns (UnderlyingAssetStatus)
    {
        StatusData memory _statusData = statusData;
        if (_statusData.underlyingAssetStatus == 0) {
            return UnderlyingAssetStatus.Pending;
        } else if (_statusData.underlyingAssetStatus == 1) {
            return UnderlyingAssetStatus.OnHold;
        } else if (_statusData.underlyingAssetStatus == 2) {
            return UnderlyingAssetStatus.Liquidated;
        } else if (_statusData.underlyingAssetStatus == 3) {
            return UnderlyingAssetStatus.ReadyToClaim;
        } else if (_statusData.underlyingAssetStatus == 4) {
            return UnderlyingAssetStatus.Refunded;
        } else return UnderlyingAssetStatus.Canceled;
    }

    function getStatusData() public view virtual returns (StatusData memory) {
        return statusData;
    }

    function active(
        uint64 _startSale,
        uint64 _active,
        uint64 _maturity
    ) public virtual {
        require(statusData.underlyingAssetStatus == 0, "!pending");
        require(_startSale < _active && _active < _maturity, "!time");
        _transferUnderlyingAsset();
        statusData = StatusData({
            startSale: Timestamp.wrap(_startSale),
            active: Timestamp.wrap(_active),
            maturity: Timestamp.wrap(_maturity),
            commit: Timestamp.wrap(0),
            distribution: Timestamp.wrap(0),
            underlyingAssetStatus: 1
        });
    }

    function _setUnderlyingAssetStatusPending() internal virtual {
        statusData.underlyingAssetStatus = 0;
    }

    function _setUnderlyingAssetStatusOnHold() internal virtual {
        statusData.underlyingAssetStatus = 1;
    }

    function _setUnderlyingAssetStatusLiquidated() internal virtual {
        statusData.underlyingAssetStatus = 2;
    }

    function _setUnderlyingAssetStatusReadyToClaim() internal virtual {
        require(
            getUnderlyingAssetStatus() == UnderlyingAssetStatus.OnHold,
            "!OnHold"
        );
        statusData.underlyingAssetStatus = 3;
    }

    function _setUnderlyingAssetStatusRefunded() internal virtual {
        statusData.underlyingAssetStatus = 4;
    }

    function _setUnderlyingAssetCanceled() internal virtual {
        statusData.underlyingAssetStatus = 5;
    }

    function _isCanceled() internal virtual returns (bool) {
        return getStatus() == Status.Canceled;
    }

    function _isPending() internal view virtual returns (bool) {
        return getStatus() == Status.Pending;
    }

    function _isOnSale() internal view virtual returns (bool) {
        return getStatus() == Status.OnSale;
    }

    function _isActive() internal view virtual returns (bool) {
        return getStatus() == Status.Active;
    }

    function _isMatured() internal view virtual returns (bool) {
        return getStatus() == Status.Matured;
    }

    function _isReadyToClaim() internal view virtual returns (bool) {
        return getUnderlyingAssetStatus() == UnderlyingAssetStatus.ReadyToClaim;
    }

    function _isLiquidated() internal view virtual returns (bool) {
        return getUnderlyingAssetStatus() == UnderlyingAssetStatus.Liquidated;
    }

    function _isRefunded() internal view virtual returns (bool) {
        return getUnderlyingAssetStatus() == UnderlyingAssetStatus.Refunded;
    }

    //for injeting test
    function _now() internal view virtual returns (uint256) {
        return block.timestamp;
    }

    function _bondTransferable() internal virtual returns (bool) {
        Status _status = getStatus();
        return
            _status == Status.Active ||
            _status == Status.Matured ||
            _status == Status.Liquidated;
    }

    function _transferUnderlyingAsset() internal virtual {}

    function getDuration() public view returns (uint64) {
        return duration.unwrap();
    }

    function _updateTimePhase() internal virtual {
        uint64 _active = uint64(_now());
        uint64 _maturity = uint64(_now() + duration.unwrap());
        statusData.active = Timestamp.wrap(_active);
        statusData.maturity = Timestamp.wrap(_maturity);
        emit TimePhaseUpdated(_active, _maturity);
    }

    function matured() internal virtual {
        statusData.maturity = Timestamp.wrap(uint64(_now()));
        emit BondMatured(uint64(_now()));
    }

    function setDuration(uint64 duration_) internal {
        duration = Timestamp.wrap(duration_ * 1 days);
    }
}


// File: contracts/impl/lending/BondUnitLending.sol
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

/// @title BondUnit contract
/// @author Justin Position
/// @dev Control bond units (token)
abstract contract BondUnitLending is ERC20 {
    // the fixed supply bond ever mint
    uint256 public bondSupply;
    string private bondName;
    string private bondSymbol;

    constructor() ERC20("", "") {}


    function initBondUnit(
        uint256 bondSupply_,
        string memory name_,
        string memory symbol_)
    internal {
        bondSupply = bondSupply_;
        bondName = name_;
        bondSymbol = symbol_;
    }

    function name() public view override(ERC20) returns (string memory) {
        return bondName;
    }

    function symbol() public view override(ERC20) returns (string memory) {
        return bondSymbol;
    }

    function _mint(address account, uint256 amount) internal override(ERC20) {
        super._mint(account, amount);
        require(totalSupply() <= bondSupply, "over supply");
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal override(ERC20) {
        if (from != address(0))
            require(_bondTransferable(), "not transferable");
    }

    function _bondTransferable() internal virtual returns (bool);
}


// File: @openzeppelin/contracts/token/ERC721/IERC721.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;

import "../../utils/introspection/IERC165.sol";

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: contracts/lib/BondMath.sol
pragma solidity ^0.8.9;

import {BondStruct} from "./BondStruct.sol";

library BondMath {
    function calculateFaceValue(uint256 bondUnit, uint256 faceValue)
        internal
        pure
        returns (uint256)
    {
        return (bondUnit * faceValue) / (10**18);
    }

    function calculateBondAmountWithFlexPrice(
        uint256 maxOfRange,
        uint256 priceOfRange,
        uint256 currentSupply,
        uint256 faceAmount
    ) internal pure returns (uint256 bondAmount, uint256 paidFaceAmount) {
        uint256 availableAmountInRange = maxOfRange - currentSupply;
        uint256 faceAmountForAvailable = (availableAmountInRange *
            priceOfRange) / (10**18);
        if (faceAmount <= faceAmountForAvailable) {
            bondAmount = calculateBondAmountWithFixPrice(
                faceAmount,
                priceOfRange
            );
            paidFaceAmount = faceAmount;
        } else {
            bondAmount = calculateBondAmountWithFixPrice(
                faceAmountForAvailable,
                priceOfRange
            );
            paidFaceAmount = faceAmountForAvailable;
        }
    }

    function calculateBondAmountWithFixPrice(
        uint256 faceAmount,
        uint256 issuePrice
    ) internal pure returns (uint256) {
        return (faceAmount * (10**18)) / issuePrice;
    }

    function calculateUnderlyingAsset(
        uint256 bondBalance,
        uint256 bondSupply,
        uint256 underlyingAmount
    ) internal pure returns (uint256) {
        return (bondBalance * underlyingAmount) / bondSupply;
    }

    function calculateRemainderUnderlyingAsset(
        uint256 totalBondSupply,
        uint256 currentBondSupply,
        uint256 underlyingAmount
    ) internal pure returns (uint256) {
        return
            ((totalBondSupply - currentBondSupply) * underlyingAmount) /
            totalBondSupply;
    }

    function getBondAmountInRange(
        BondStruct.BondPriceRange[] memory _bondPriceRange,
        uint256 _currentSupply,
        uint256 amount
    ) internal pure returns (uint256 bondAmount, uint256 faceAmount) {
        for (uint256 i = 0; i < _bondPriceRange.length; i++) {
            if (
                _bondPriceRange[i].min <= _currentSupply &&
                _currentSupply < _bondPriceRange[i].max
            ) {
                (bondAmount, faceAmount) = BondMath
                    .calculateBondAmountWithFlexPrice(
                        _bondPriceRange[i].max,
                        _bondPriceRange[i].price,
                        _currentSupply,
                        amount
                    );
                return (bondAmount, faceAmount);
            }
        }
        return (0, 0);
    }

    function calculateIssuePriceWithRange(
        BondStruct.BondPriceRange[] memory _bondPriceRange,
        uint256 _totalSupply
    ) internal pure returns (uint256) {
        uint256 totalFaceValue;
        for (uint256 i = 0; i < _bondPriceRange.length; i++) {
            totalFaceValue +=
                (_bondPriceRange[i].max - _bondPriceRange[i].min) *
                _bondPriceRange[i].price;
        }
        return totalFaceValue / _totalSupply;
    }

    function availableAmountToCommit(
        uint256 amountCommit,
        uint256 totalAmountCommitted,
        uint256 maxAmountCanCommit
    ) internal pure returns (uint256) {
        if (totalAmountCommitted + amountCommit > maxAmountCanCommit) {
            return maxAmountCanCommit - totalAmountCommitted;
        }
        return amountCommit;
    }

    function calculateBondDistributionAmount(
        uint256 amountCommitted,
        uint256 totalAmountCommitted,
        uint256 bondSupply
    ) internal pure returns (uint256 bondAmount) {
        return (bondSupply * amountCommitted) / totalAmountCommitted;
    }
}


// File: contracts/lib/BondTransfer.sol
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/utils/Address.sol";

library BondTransfer {
    using Address for address payable;

    function _transferInToken(
        address _token,
        uint256 _amount,
        address _sender
    ) internal {
        IERC20(_token).transferFrom(_sender, address(this), _amount);
    }

    function _transferOutToken(
        address _token,
        uint256 _amount,
        address recipient
    ) internal {
        IERC20(_token).transfer(recipient, _amount);
    }

    function _transferInPosiNFT(
        address _nonFungibleToken,
        uint256 _tokenID,
        address _sender
    ) internal {
        IERC721(_nonFungibleToken).safeTransferFrom(
            _sender,
            address(this),
            _tokenID
        );
    }

    function _transferInPosiNFTs(
        address _nonFungibleToken,
        uint256[] memory _posiNFTsID,
        address _sender
    ) internal {
        for (uint256 i = 0; i < _posiNFTsID.length; i++) {
            IERC721(_nonFungibleToken).safeTransferFrom(
                _sender,
                address(this),
                _posiNFTsID[i]
            );
        }
    }

    function _transferOutPosiNFT(
        address _nonFungibleToken,
        uint256[] storage _posiNFTsID,
        address _sender
    ) internal {
        for (uint256 i = 0; i < _posiNFTsID.length; i++) {
            IERC721(_nonFungibleToken).safeTransferFrom(
                address(this),
                _sender,
                _posiNFTsID[i]
            );
        }
    }

    function _transferOutEther(address _recipient, uint256 _amount) internal {
        payable(_recipient).sendValue(_amount);
    }
}


// File: contracts/interfaces/IPosiNFTFactory.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

pragma experimental ABIEncoderV2;

import "./IPosiNFT.sol";

interface IPosiNFTFactory {
    function getGego(uint256 tokenId)
        external
        view
        returns (
            uint256 grade,
            uint256 quality,
            uint256 amount,
            uint256 resBaseId,
            uint256 tLevel,
            uint256 ruleId,
            uint256 nftType,
            address author,
            address erc20,
            uint256 createdTime,
            uint256 blockNum,
            uint256 lockedDays
        );

    function getGegoStruct(uint256 tokenId)
        external
        view
        returns (IPosiNFT.Gego memory gego);

    function burn(uint256 tokenId) external returns (bool);

    function isRulerProxyContract(address proxy) external view returns (bool);
}


// File: @openzeppelin/contracts/utils/introspection/IERC165.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: contracts/lib/BondStruct.sol
pragma solidity ^0.8.9;

library BondStruct {
    struct BondPriceRange {
        uint256 min;
        uint256 max;
        uint256 price;
    }
}


// File: contracts/interfaces/IPosiNFT.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";

interface IPosiNFT is IERC721 {
    struct Gego {
        uint256 id;
        uint256 grade;
        uint256 quality;
        uint256 amount;
        uint256 resBaseId;
        uint256 tLevel;
        uint256 ruleId;
        uint256 nftType;
        address author;
        address erc20;
        uint256 createdTime;
        uint256 blockNum;
        uint256 lockedDays;
    }

    function mint(address to, uint256 tokenId) external returns (bool);

    function burn(uint256 tokenId) external;
}


// File: contracts/interfaces/IChainLinkPriceFeed.sol
/**
 * @author Musket
 */
pragma solidity ^0.8.9;

interface IChainLinkPriceFeed {
    // get latest price
    function getPrice(bytes32 _priceFeedKey) external view returns (uint256);

    // get latest timestamp
    function getLatestTimestamp(bytes32 _priceFeedKey)
        external
        view
        returns (uint256);

    // get previous price with _back rounds
    function getPreviousPrice(bytes32 _priceFeedKey, uint256 _numOfRoundBack)
        external
        view
        returns (uint256);

    // get previous timestamp with _back rounds
    function getPreviousTimestamp(
        bytes32 _priceFeedKey,
        uint256 _numOfRoundBack
    ) external view returns (uint256);

    // get twap price depending on _period
    function getTwapPrice(bytes32 _priceFeedKey, uint256 _interval)
        external
        view
        returns (uint256);
}


// File: contracts/lib/Timers.sol
pragma solidity ^0.8.9;

type Timestamp is uint64;

library Timers {
    function unwrap(Timestamp timer) internal pure returns (uint64) {
        return Timestamp.unwrap(timer);
    }

    function isUnset(Timestamp timer) internal pure returns (bool) {
        return unwrap(timer) == 0;
    }

    function isStarted(Timestamp timer) internal pure returns (bool) {
        return unwrap(timer) > 0;
    }

    function passed(Timestamp timer, uint256 _now)
        internal
        pure
        returns (bool)
    {
        return unwrap(timer) < _now && unwrap(timer) > 0;
    }

    function isPending(Timestamp timer) internal view returns (bool) {
        return unwrap(timer) > block.timestamp;
    }

    function isExpired(Timestamp timer) internal view returns (bool) {
        return isStarted(timer) && unwrap(timer) <= block.timestamp;
    }
}


// File: @openzeppelin/contracts/token/ERC20/ERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./extensions/IERC20Metadata.sol";
import "../../utils/Context.sol";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";

/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

