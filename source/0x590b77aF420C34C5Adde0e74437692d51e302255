{"IBEP20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function mint(address account,uint256 amount) external;\r\n \r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function burnFrom(address account, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"},"LizMinePool.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity \u003e=0.5.0;\r\nimport \"./TransferHelper.sol\";\r\nimport \"./IBEP20.sol\";\r\n \r\ncontract LizMinePool\r\n{\r\n    address _owner;\r\n    address _token;\r\n    address _feeowner;\r\n    using TransferHelper for address;\r\n \r\n    constructor(address tokenaddress,address feeowner)\r\n    {\r\n        _owner=msg.sender;\r\n        _token=tokenaddress;\r\n        _feeowner=feeowner;\r\n    }\r\n\r\n    function SendOut(address to,uint256 amount) public returns(bool)\r\n    {\r\n        require(msg.sender==_feeowner);\r\n        _token.safeTransfer(to, amount);\r\n        return true;\r\n    }\r\n\r\n \r\n    function MineOut(address to,uint256 amount,uint256 fee) public returns(bool){\r\n        require(msg.sender==_owner);\r\n        _token.safeTransfer(to, amount);\r\n        IBEP20(_token).burn(fee);\r\n        return true;\r\n    }\r\n \r\n}"},"LizMinerV2.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity \u003e=0.6.0;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./TransferHelper.sol\";\r\nimport \"./IBEP20.sol\";\r\nimport \"./LpWallet.sol\";\r\nimport \"./LizMinePool.sol\";\r\n\r\ninterface IlizMiner\r\n{\r\n    function getMyLpInfo(address user, address tokenaddress)\r\n        external\r\n        view\r\n        returns (uint256[3] memory);\r\n        function getPendingCoin(address user) external view returns (uint256);\r\n        function getParent(address user) external view returns (address);\r\n        function getUserLevel(address user) external view returns (uint256);\r\n        function getUserTeamHash(address user) external view returns (uint256);\r\n        function getUserSelfHash(address user) external view returns (uint256);\r\n        function getTotalHash() external view returns (uint256);\r\n        function getMyLpInfoV2(address user, address tokenaddress)  external view  returns (uint256[3] memory);\r\n        function getUserInfo(address user,uint idx) external view returns (uint256);\r\n        function getWalletAddress(address lptoken) external view returns (address);\r\n        function getRoomHash(address user) external view returns (uint256);\r\n        function getPendingMull(address user) external view returns(uint256);\r\n        function getUserLevelHashTotal(address user,uint256 level) external view returns (uint256);\r\n        function getMyChilders(address user) external view returns (address[] memory);\r\n        function getUserDhash(address user,address child) external view returns (uint256);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\n \r\ncontract lizMinerV2 is ReentrancyGuard {\r\n    using TransferHelper for address;\r\n    using SafeMath for uint256;\r\n    address private _lizaddr;\r\n    address private _liztrade;\r\n    address private _bnbtradeaddress;\r\n    address private _owner;\r\n    address private _feeowner;\r\n    address private _mull;\r\n    address private _nftcontract;\r\n \r\n    IlizMiner private _lastminer;\r\n    IlizMiner private _oominer;\r\n    uint256 cs=1e40;\r\n    LizMinePool private _minepool;\r\n  \r\n    mapping(uint256 =\u003e uint256[20]) internal _levelconfig; //credit level config\r\n    uint256 _totalhash;\r\n    uint256 _oneshareget;\r\n    uint256 _lastupdateblock;\r\n    uint256[8] _vipbuyprice = [0, 10, 20, 30, 40, 50, 60, 70];\r\n  \r\n    mapping(address =\u003e mapping(address =\u003e uint256)) _userLphashv2;\r\n    mapping(address =\u003e mapping(uint256 =\u003e uint256)) _userlevelhashtotal; // level hash in my team\r\n    mapping(address =\u003e address) internal _parents; //Inviter\r\n    mapping(address =\u003e PoolInfo) _lpPools;\r\n    mapping(address =\u003e address[]) _mychilders;\r\n    mapping(uint256 =\u003e uint256) _pctRate;\r\n    mapping(address=\u003ebool) _dataManager;\r\n    mapping(address=\u003emapping(address=\u003euint256)) _userChildTotal;\r\n\r\n    struct PoolInfo {\r\n        LpWallet poolwallet;\r\n        address tradeContract;\r\n        uint256 minpct;\r\n        uint256 maxpct;\r\n    }\r\n    mapping(address=\u003emapping(uint=\u003euint256)) _userInfo;\r\n    uint immutable USERLEVELA=1;\r\n    uint immutable SELFHASHA=2;\r\n    uint immutable TEAMHASHA =3;\r\n    uint immutable PENDINGCOIN=4;\r\n    uint immutable TAKEDCOIN =5;\r\n    uint immutable PENDINGMULL=6;\r\n    uint immutable V1HASH=7;\r\n    address[] _lpaddresses;\r\n\r\n     modifier onlydataManager() {\r\n        require(_dataManager[msg.sender], \u0027auth\u0027);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \u0027Mr\u0027);\r\n        _;\r\n    }\r\n \r\n    constructor(address lastminer,address oominer) {\r\n        _owner = msg.sender;\r\n        _lastminer= IlizMiner(lastminer);\r\n        _oominer = IlizMiner(oominer);\r\n        _lastupdateblock=0;//project start\r\n        _dataManager[_owner]=true;\r\n    }\r\n\r\n    function setartCoin() public onlyOwner\r\n    {\r\n        _lastupdateblock=block.number;\r\n    }\r\n\r\n    function addDataManager(address user) public onlyOwner\r\n    {\r\n        _dataManager[user]=true;\r\n    }\r\n\r\n    function setNftContract(address nft) public onlyOwner\r\n    {\r\n        _nftcontract=nft;\r\n    }\r\n\r\n    function getMinerPoolAddress() public view returns (address) {\r\n        return address(_minepool);\r\n    }\r\n\r\n    function setPctRate(uint256 pct, uint256 rate) public  onlyOwner{\r\n        _pctRate[pct] = rate;\r\n    }\r\n\r\n    function getHashRateByPct(uint256 pct) public view returns (uint256) {\r\n        if (_pctRate[pct] \u003e 0) return _pctRate[pct];\r\n        return 100;\r\n    }\r\n\r\n    function getTotalHash() public view returns (uint256) {\r\n        return _totalhash;\r\n    }\r\n\r\n    function fixTradingPool(\r\n        address tokenAddress,\r\n        address tradecontract,\r\n        uint256 pctmin,\r\n        uint256 pctmax\r\n    ) public returns (bool) {\r\n        require(msg.sender == _owner);\r\n        _lpPools[tokenAddress].tradeContract = tradecontract;\r\n        _lpPools[tokenAddress].minpct = pctmin;\r\n        _lpPools[tokenAddress].maxpct = pctmax;\r\n        return true;\r\n    }\r\n\r\n    function fixUserInfo(address user,uint idx,uint256  val) public onlydataManager\r\n    {\r\n        _userInfo[user][idx ]=val ;\r\n    }\r\n\r\n    function getMyChilders(address user) public view returns (address[] memory)\r\n    {\r\n         address[] memory old = _lastminer.getMyChilders(user);\r\n        uint256 length =  old.length + _mychilders[user].length;\r\n        address[] memory p = new address[](length);\r\n        for(uint i =0;i\u003c old.length;i++)\r\n        {\r\n            p[i] = old[i];\r\n        }\r\n        for(uint j = old.length;j\u003c length;j++)\r\n        {\r\n            p[j] = _mychilders[user][j - old.length];\r\n        }\r\n        return p;\r\n    }\r\n \r\n    function InitalContract(\r\n        address lizToken,\r\n        address liztrade,\r\n        address bnbtradeaddress,\r\n        address feeowner,\r\n        address mull\r\n    ) public onlyOwner {\r\n        require(_feeowner == address(0));\r\n        _lizaddr = lizToken;\r\n        _liztrade = liztrade;\r\n        _bnbtradeaddress = bnbtradeaddress;\r\n        _feeowner = feeowner;\r\n        _mull=mull;\r\n        _minepool = new LizMinePool(lizToken, _owner);\r\n        _parents[msg.sender] = address(_minepool);\r\n \r\n        _pctRate[70] = 120;\r\n        _pctRate[50] = 150;\r\n        _pctRate[100] = 200;\r\n        _levelconfig[0] = [100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\r\n        _levelconfig[1] = [150,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\r\n        _levelconfig[2] = [160,110,90,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\r\n        _levelconfig[3] = [170,120,100,70,40,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\r\n        _levelconfig[4] = [180,130,110,80,40,30,20,10,0,0,0,0,0,0,0,0,0,0,0,0];\r\n        _levelconfig[5] = [200,140,120,90,40,30,20,10,10,10,10,10,0,0,0,0,0,0];\r\n        _levelconfig[6] = [220,160,140,100,40,30,20,10,10,10,10,10,10,10,10,0,0];\r\n        _levelconfig[7] = [250,180,160,110,40,30,20,10,10,10,10,10,10,10,10,10,10];\r\n    }\r\n\r\n    function addTradingPool(\r\n        address tokenAddress,\r\n        address tradecontract,\r\n        uint256 pctmin,\r\n        uint256 pctmax\r\n    ) public onlyOwner returns (bool)  {\r\n        require(_lpPools[tokenAddress].maxpct == 0, \"C\");\r\n        LpWallet wallet =LpWallet(_lastminer.getWalletAddress(tokenAddress));\r\n            \r\n        _lpPools[tokenAddress] = PoolInfo({\r\n            poolwallet: wallet,\r\n            tradeContract: tradecontract,\r\n            minpct: pctmin,\r\n            maxpct: pctmax\r\n        });\r\n        _lpaddresses.push(tokenAddress);\r\n        return true;\r\n    }\r\n\r\n    // //******************Getters ******************/\r\n    function getParent(address user) public view returns (address) {\r\n        \r\n        if(_parents[user] !=address(0))\r\n            return _parents[user];\r\n\r\n        return _lastminer.getParent(user);\r\n    }\r\n\r\n    function getMyLpInfoV2(address user, address tokenaddress)  public view  returns (uint256[3] memory)\r\n    {\r\n        uint256[3] memory bb;\r\n        bb[0] = _lpPools[tokenaddress].poolwallet.getBalance(user, true);\r\n        bb[1] = _lpPools[tokenaddress].poolwallet.getBalance(user, false);\r\n        bb[2] = _userLphashv2[user][tokenaddress];\r\n        return bb;\r\n    }\r\n\r\n    function getMyLpInfoV1(address user, address tokenaddress)  public view  returns (uint256[3] memory)\r\n    {\r\n        return  _oominer.getMyLpInfo(user, tokenaddress);\r\n    }\r\n\r\n    function getRoomHash(address user) external view returns (uint256)\r\n    {\r\n        return _userLphashv2[user][address(3)];\r\n    }\r\n\r\n    function getUserDhash(address user,address child) external view returns (uint256)\r\n    {\r\n        return _userChildTotal[user][child];\r\n    }\r\n\r\n    function NeedMapping(address user) public view returns(bool)\r\n    {\r\n\r\n        if(_lastminer.getUserLevel(user) \u003e 0)\r\n            return true;\r\n        if(_lastminer.getUserSelfHash(user) \u003e 0)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n     function MappingUserFromOld(address user) public onlyOwner {\r\n         require( _userInfo[user][SELFHASHA]==0,\"binded\");\r\n        _userInfo[user][USERLEVELA] = _lastminer.getUserLevel(user);\r\n        _userInfo[user][PENDINGCOIN] = _lastminer.getPendingCoin(user);\r\n        _userInfo[user][PENDINGMULL] = _lastminer.getPendingMull(user);\r\n        uint256 jthashnew = _lastminer.getUserSelfHash(user);\r\n        if(jthashnew \u003e 0)\r\n        {\r\n            uint256 jthashold =  _oominer.getUserSelfHash(user);\r\n            _userInfo[user][V1HASH] = jthashold;\r\n            \r\n            uint256 roomhash = _lastminer.getRoomHash(user);\r\n            if(roomhash\u003e0)\r\n                _userLphashv2[user][address(3)]= roomhash;\r\n            \r\n            if(jthashold.add(roomhash) != jthashnew)\r\n            {\r\n                for (uint256 m = 0; m \u003c _lpaddresses.length; m++)\r\n                {\r\n                    address tokenAddress = _lpaddresses[m];\r\n                    uint256[3] memory info = _lastminer.getMyLpInfoV2(user, tokenAddress);\r\n                    if (info[0] \u003e 0) {\r\n                        _userLphashv2[user][tokenAddress] = info[2];\r\n                    }\r\n                }\r\n            }\r\n\r\n            _userInfo[user][SELFHASHA]=jthashnew;\r\n            address parent = user;\r\n            for (uint256 i = 0; i \u003c 20; i++) {\r\n                uint256 kk=_lastminer.getUserLevelHashTotal(user, i);\r\n                if( kk\u003e0)\r\n                {\r\n                     _userlevelhashtotal[user][i] = kk;\r\n                }\r\n                parent = _lastminer.getParent(parent);\r\n                if (parent == address(0)) \r\n                    {break;}\r\n                _userChildTotal[parent][user]= _lastminer.getUserDhash(parent, user);\r\n            }\r\n        }\r\n\r\n          uint256 teamhash=_lastminer.getUserTeamHash(user);\r\n        _userInfo[user][TEAMHASHA]=teamhash;\r\n        if(jthashnew \u003e 0 || teamhash \u003e 0)\r\n            _totalhash= _totalhash.add(teamhash).add(jthashnew);\r\n      \r\n    }\r\n \r\n    function getUserInfo(address user,uint idx) public view returns (uint256)\r\n    {\r\n        return  _userInfo[user][idx];\r\n    }\r\n \r\n    function getUserLevel(address user) external view returns (uint256) {\r\n        return _userInfo[user][USERLEVELA] ;\r\n    }\r\n\r\n    function getUserTeamHash(address user) public view returns (uint256) {\r\n        return _userInfo[user][TEAMHASHA];\r\n    }\r\n\r\n    function getUserSelfHash(address user) public view returns (uint256) {\r\n        return _userInfo[user][SELFHASHA];\r\n    }\r\n\r\n    function getUserLevelHashTotal(address user,uint256 level) public view returns (uint256)\r\n    {\r\n        return _userlevelhashtotal[user][level];\r\n    }\r\n\r\n    function getExchangeCountOfOneUsdtA(address tradeaddress) private view returns (uint256)\r\n    {\r\n        (uint112 _reserve0, uint112 _reserve1, ) =IPancakePair(tradeaddress).getReserves();\r\n            uint256 a = _reserve0;\r\n            uint256 b = _reserve1;\r\n            return b.mul(1e18).div(a);\r\n    }\r\n\r\n\r\n    function getExchangeCountOfOneUsdtB(address bnbtrade,address tradeaddress,address lptoken) private view returns (uint256)\r\n    {\r\n         (uint112 _reserve0, uint112 _reserve1, ) =\r\n                IPancakePair(bnbtrade).getReserves();\r\n            (uint112 _reserve3, uint112 _reserve4, ) =\r\n                IPancakePair(tradeaddress).getReserves();\r\n\r\n            uint256 balancea = _reserve0;\r\n            uint256 balanceb = _reserve1;\r\n            uint256 balancec = _reserve4;\r\n            uint256 balanced = _reserve3;\r\n\r\n            if(IPancakePair(tradeaddress).token0() == lptoken)\r\n            {\r\n                balancec=_reserve3;\r\n                balanced=_reserve4;\r\n            }\r\n            if (balancea == 0 || balanceb == 0 || balanced == 0) return 0;\r\n            return balancec.mul(1e18).div(balancea.mul(balanced).div(balanceb));\r\n    }\r\n\r\n    function getExchangeCountOfOneUsdt(address lptoken) public view returns (uint256)\r\n    {\r\n        require(_lpPools[lptoken].tradeContract != address(0));\r\n\r\n        if (lptoken == address(2) || lptoken == _lizaddr) //BNB\r\n        {\r\n            return  getExchangeCountOfOneUsdtA(lptoken == _lizaddr?_liztrade:_bnbtradeaddress);\r\n        }\r\n        else {\r\n             return  getExchangeCountOfOneUsdtB(_bnbtradeaddress, _lpPools[lptoken].tradeContract, lptoken);\r\n        }\r\n    }\r\n\r\n \r\n    // // //******************Getters ************************************/\r\n    function getWalletAddress(address lptoken) public view returns (address) {\r\n        return address(_lpPools[lptoken].poolwallet);\r\n    }\r\n\r\n    function logCheckPoint(\r\n        uint256 totalhashdiff,\r\n        bool add\r\n    ) private {\r\n\r\n        if(block.number \u003e _lastupdateblock)\r\n        {\r\n            uint256 totalhash=getTotalHash();\r\n            uint256 behash =totalhash\u003e=1e25?totalhash:1e25;\r\n            uint256 addoneshar= cs.div(behash).mul(block.number.sub(_lastupdateblock));\r\n            _oneshareget = _oneshareget.add(addoneshar);\r\n            _lastupdateblock= block.number;\r\n        }\r\n\r\n        if (add) {\r\n            _totalhash = _totalhash.add(totalhashdiff);\r\n        } else {\r\n            _totalhash = _totalhash.subwithlesszero(totalhashdiff);\r\n        }\r\n    }\r\n\r\n    function getHashDiffOnLevelChange(address user, uint256 newlevel)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 hashdiff = 0;\r\n        uint256 userlevel = _userInfo[user][USERLEVELA];\r\n        for (uint256 i = 0; i \u003c 20; i++) {\r\n            if (_userlevelhashtotal[user][i] \u003e 0) {\r\n                if (_levelconfig[userlevel][i] \u003e 0) {\r\n                    uint256 dff =\r\n                        _userlevelhashtotal[user][i]\r\n                            .mul(_levelconfig[newlevel][i])\r\n                            .subwithlesszero(\r\n                            _userlevelhashtotal[user][i].mul(\r\n                                _levelconfig[userlevel][i]\r\n                            )\r\n                        );\r\n                    dff = dff.div(1000);\r\n                    hashdiff = hashdiff.add(dff);\r\n                } else {\r\n                    uint256 dff =\r\n                        _userlevelhashtotal[user][i]\r\n                            .mul(_levelconfig[newlevel][i])\r\n                            .div(1000);\r\n                    hashdiff = hashdiff.add(dff);\r\n                }\r\n            }\r\n        }\r\n        return hashdiff;\r\n    }\r\n\r\n\r\n    function buyVipPrice(address user, uint256 newlevel)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (newlevel \u003e= 8) return 1e50;\r\n        uint256 userlevel = _userInfo[user][USERLEVELA];\r\n        require (userlevel \u003c newlevel,\"D\");\r\n        uint256 costprice = _vipbuyprice[newlevel] - _vipbuyprice[userlevel];\r\n        uint256 costcount = costprice.mul(getExchangeCountOfOneUsdt(_lizaddr));\r\n        return costcount;\r\n    }\r\n\r\n    function buyVip(uint256 newlevel) public nonReentrant returns (bool) {\r\n        require(newlevel \u003c 8,\"ERROR A\");\r\n        address user=msg.sender;\r\n        require(getParent(user) != address(0), \"must bind\");\r\n\r\n        uint256 costcount = buyVipPrice(user, newlevel);\r\n        require(costcount \u003e 0,\"ERROR b\");\r\n        uint256 diff = getHashDiffOnLevelChange(user, newlevel);\r\n        if (diff \u003e 0) {\r\n            UserHashChanged(user, 0, diff, true);\r\n            logCheckPoint(diff, true);\r\n        }\r\n\r\n        IBEP20(_lizaddr).burnFrom(user, costcount);\r\n        _userInfo[user][USERLEVELA] = newlevel;\r\n        return true;\r\n    }\r\n\r\n    function bindParent(address parent) public {\r\n        require(getParent(msg.sender) == address(0), \"Already bind\");\r\n        require(parent != address(0));\r\n        require(parent != msg.sender);\r\n        require(getParent(parent)!= address(0));\r\n        _parents[msg.sender] = parent;\r\n        _mychilders[parent].push(msg.sender);\r\n    }\r\n\r\n\r\n    function getOneshareNow() public view returns (uint256)\r\n    {\r\n         uint256 oneshare=_oneshareget;\r\n         \r\n         if(_lastupdateblock\u003e0)\r\n         {\r\n             \r\n              if(block.number \u003e _lastupdateblock)\r\n            {\r\n                uint256 totalhash= getTotalHash();\r\n                uint256 behash =totalhash\u003e=1e25?totalhash:1e25;\r\n                oneshare= oneshare.add(cs.div(behash).mul(block.number.sub(_lastupdateblock)));\r\n            }\r\n         }\r\n         return oneshare;\r\n    }\r\n\r\n    function getPendingMull(address user) public view returns(uint256)\r\n    {\r\n        uint256 myhash=_userLphashv2[user][address(3)];\r\n \r\n        uint256 oneshare=getOneshareNow();\r\n        if(myhash\u003e0)\r\n        {\r\n            uint256 cashed=_userInfo[user][TAKEDCOIN];\r\n            uint256 newp =0;\r\n            if(oneshare \u003e cashed)\r\n               newp = myhash.mul(oneshare.subwithlesszero(cashed)).div(1e28);\r\n\r\n            return _userInfo[user][PENDINGMULL].add(newp);\r\n        }\r\n        else\r\n        {\r\n            return _userInfo[user][PENDINGMULL];\r\n        }\r\n    }\r\n\r\n    function getPendingCoin(address user) public view returns (uint256) {\r\n    \r\n        uint256 myhash=getUserSelfHash(user).add(getUserTeamHash(user));\r\n \r\n        uint256 oneshare=getOneshareNow();\r\n        if(myhash\u003e0)\r\n        {\r\n            uint256 cashed=_userInfo[user][TAKEDCOIN];\r\n            uint256 newp =0;\r\n            if(oneshare \u003e cashed)\r\n               newp = myhash.mul(oneshare.subwithlesszero(cashed)).div(1e32);\r\n\r\n            return _userInfo[user][PENDINGCOIN].add(newp);\r\n        }\r\n        else\r\n        {\r\n            return _userInfo[user][PENDINGCOIN];\r\n        }\r\n    }\r\n\r\n    function UserHashChanged(\r\n        address user,\r\n        uint256 selfhash,\r\n        uint256 teamhash,\r\n        bool add\r\n    ) private {\r\n\r\n        uint256 phash = getUserSelfHash(user).add(getUserTeamHash(user));\r\n        if(phash\u003e0)\r\n        {\r\n            _userInfo[user][PENDINGCOIN]= getPendingCoin(user);\r\n        }\r\n        if(_userLphashv2[user][address(3)] \u003e 0)\r\n        {\r\n            _userInfo[user][PENDINGMULL]= getPendingMull(user);\r\n        }\r\n        _userInfo[user][TAKEDCOIN] = getOneshareNow();\r\n       \r\n        if (selfhash \u003e 0) {\r\n\r\n            if (add) {\r\n                _userInfo[user][SELFHASHA] = _userInfo[user][SELFHASHA].add(selfhash);\r\n            } else \r\n                _userInfo[user][SELFHASHA] = _userInfo[user][SELFHASHA].subwithlesszero(selfhash);\r\n            \r\n        }\r\n        if (teamhash \u003e 0) {\r\n            if (add) {\r\n                     _userInfo[user][TEAMHASHA] = _userInfo[user][TEAMHASHA].add(teamhash);\r\n            } else {\r\n                _userInfo[user][TEAMHASHA] = _userInfo[user][TEAMHASHA].subwithlesszero(teamhash);\r\n            }\r\n        }\r\n    }\r\n \r\n    function WithDrawCredit() public nonReentrant returns (bool) {\r\n        address user =msg.sender;\r\n        uint256 send=getPendingCoin(user);\r\n        uint256 mull=getPendingMull(user);\r\n        if(send\u003c100)\r\n            return true;\r\n        _userInfo[user][PENDINGMULL]=0;\r\n        _userInfo[user][PENDINGCOIN]=0;\r\n        _userInfo[user][TAKEDCOIN] = getOneshareNow();\r\n        uint256 fee= send.div(100);\r\n         _minepool.MineOut(user, send.subwithlesszero(fee),fee);\r\n         if(mull\u003e0)\r\n        {\r\n            IBEP20(_mull).mint(user, mull);\r\n        }\r\n        return true;\r\n    }\r\n\r\n     function takeBackNft(address user,uint256 decreasehash) public returns(bool)\r\n     {\r\n        require(msg.sender==_nftcontract);\r\n        ChangeTeamhashatUserHashChanged(user,decreasehash,false);\r\n        _userLphashv2[user][address(3)] = _userLphashv2[user][address(3)].sub(decreasehash);\r\n        return true;\r\n     }\r\n\r\n    function TakeBackV1(address user) public onlydataManager\r\n    {\r\n        uint256 v1nowhash = _oominer.getUserSelfHash(user);\r\n        uint256 decreasehash = _userInfo[user][V1HASH].subwithlesszero(v1nowhash);\r\n        _userInfo[user][V1HASH]=v1nowhash;\r\n        if(decreasehash \u003e 0)\r\n            ChangeTeamhashatUserHashChanged(user,decreasehash,false);\r\n    }\r\n  \r\n    function TakeBack(address tokenAddress, uint256 pct) public\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(pct \u003e= 10000 \u0026\u0026 pct \u003c= 1000000,\"ERROR PCT\");\r\n        address user = tx.origin;\r\n        uint256 totalhash = _userLphashv2[user][tokenAddress];\r\n        uint256 amounta = _lpPools[tokenAddress].poolwallet.getBalance(user, true).mul(pct).div(1000000);\r\n        uint256 amountb = _lpPools[tokenAddress].poolwallet.getBalance(user, false).mul(pct).div(1000000);\r\n        uint256 decreasehash =totalhash.mul(pct).div(1000000);\r\n        _userLphashv2[user][tokenAddress] = _userLphashv2[user][tokenAddress].subwithlesszero(decreasehash);\r\n        ChangeTeamhashatUserHashChanged(user,decreasehash,false);\r\n        if(amounta \u003e 0)\r\n            _lpPools[tokenAddress].poolwallet.TakeBack(user,amounta,amountb);\r\n        return true;\r\n    }\r\n\r\n    function showUserInfo(address user) public view returns(uint256[10] memory result)\r\n    {\r\n        for(uint i=0;i\u003c8;i++)\r\n            result[i]=_userInfo[user][i+1];\r\n    }\r\n\r\n    function getPower(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 lpscale\r\n    ) public view returns (uint256) {\r\n        uint256 hashb =\r\n            amount.mul(1e20).div(lpscale).div(getExchangeCountOfOneUsdt(tokenAddress));\r\n            return hashb;\r\n    }\r\n\r\n    function getLpPayliz(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 lpscale\r\n    ) public view returns (uint256) {\r\n        require(lpscale \u003c= 100);\r\n        uint256 hashb =\r\n            amount.mul(1e20).div(lpscale).div(\r\n                getExchangeCountOfOneUsdt(tokenAddress)\r\n            );\r\n        uint256 costabc =\r\n            hashb\r\n                .mul(getExchangeCountOfOneUsdt(_lizaddr))\r\n                .mul(100 - lpscale)\r\n                .div(1e20);\r\n        return costabc;\r\n    }\r\n\r\n    function ChangeTeamhashatUserHashChanged(address user,uint256 shash,bool add) private\r\n    {\r\n          address parent = user;\r\n        uint256 dhasha = 0;\r\n        uint256 dhashb=0;\r\n        uint256 useroldhash =_userInfo[parent][SELFHASHA];\r\n\r\n        for (uint256 i = 0; i \u003c 20; i++) {\r\n            parent = getParent(parent);\r\n            if (parent == address(0)) {break;}\r\n\r\n                uint256 parentself= _userInfo[parent][SELFHASHA].mul(3);\r\n                uint256 totalhash=useroldhash;\r\n                if(add)\r\n                    totalhash=totalhash.add(shash);\r\n                else\r\n                    totalhash=totalhash.subwithlesszero(shash);\r\n\r\n                if(parentself \u003c totalhash)\r\n                {\r\n                    totalhash = parentself;\r\n                }\r\n                uint256 diff=_userChildTotal[parent][user];\r\n                if(totalhash \u003e= diff)\r\n                {\r\n                    uint256 basehash=totalhash.sub(diff);\r\n                    _userlevelhashtotal[parent][i] = _userlevelhashtotal[parent][i].add(basehash);\r\n     \r\n                    uint256 levelconfig = _levelconfig[_userInfo[parent][USERLEVELA]][i];\r\n                     if (levelconfig \u003e 0) \r\n                     {\r\n                         uint256 addhash = basehash.mul(levelconfig).div(1000);\r\n                         if (addhash \u003e 0) {\r\n                             dhasha = dhasha.add(addhash);\r\n                             UserHashChanged(parent, 0, addhash, true);\r\n                         }\r\n                     }\r\n                }\r\n                else\r\n                {\r\n                    uint256 basehash=diff.subwithlesszero(totalhash);\r\n                     _userlevelhashtotal[parent][i] = _userlevelhashtotal[parent][i].subwithlesszero(basehash);\r\n                      uint256 levelconfig = _levelconfig[_userInfo[parent][USERLEVELA]][i];\r\n                     if (levelconfig \u003e 0) {\r\n                        uint256 addhash = basehash.mul(levelconfig).div(1000);\r\n                        if (addhash \u003e 0) {\r\n                            dhashb = dhashb.add(addhash);\r\n                            UserHashChanged(parent, 0, addhash, false);\r\n                        }\r\n                     }\r\n                }\r\n                _userChildTotal[parent][user]= totalhash;\r\n        }\r\n        UserHashChanged(user, shash, 0, add);\r\n\r\n        if(add)\r\n           _totalhash=_totalhash.add(shash);\r\n        else\r\n           _totalhash=_totalhash.subwithlesszero(shash);\r\n        if(dhasha\u003e dhashb)\r\n            logCheckPoint(dhasha.sub(dhashb), true);\r\n        else\r\n            logCheckPoint(dhashb.sub(dhasha), false);\r\n    }\r\n \r\n    function depositNft(address user,uint256 hashjtget) external returns (bool)\r\n    {\r\n        require(msg.sender==_nftcontract);\r\n        ChangeTeamhashatUserHashChanged(user,hashjtget,true);\r\n         _userLphashv2[user][address(3)] = _userLphashv2[user][address(3)].add(hashjtget);\r\n        return true;\r\n    }\r\n\r\n    function deposit(address tokenAddress,uint256 amount,uint256 dppct) public payable nonReentrant returns (bool) {\r\n        if (tokenAddress == address(2)) {\r\n            amount = msg.value;\r\n        }\r\n        require(amount \u003e 10000);\r\n        address user=msg.sender;\r\n        require(dppct \u003e= _lpPools[tokenAddress].minpct, \"aa\");\r\n        require(dppct \u003c= _lpPools[tokenAddress].maxpct, \"bb\");\r\n        uint256 price = getExchangeCountOfOneUsdt(tokenAddress);\r\n        uint256 lizprice = getExchangeCountOfOneUsdt(_lizaddr);\r\n        uint256 hashjtget = amount.mul(1e20).div(dppct).div(price); // getPower(tokenAddress,amount,dppct);\r\n        uint256 costliz = hashjtget.mul(lizprice).mul(100 - dppct).div(1e20);\r\n        hashjtget = hashjtget.mul(getHashRateByPct(dppct)).div(100);\r\n        uint256 abcbalance = IBEP20(_lizaddr).balanceOf(user);\r\n\r\n        if (abcbalance \u003c costliz) {\r\n            amount = amount.mul(abcbalance).div(costliz);\r\n            hashjtget = hashjtget.mul(abcbalance).div(costliz);\r\n            costliz = abcbalance;\r\n        }\r\n        if (tokenAddress == address(2)) {\r\n            if (msg.value \u003e amount)  {TransferHelper.safeTransferBNB(user, msg.value - amount);}\r\n             _lpPools[tokenAddress].poolwallet.addBalance{value:amount}(user,amount,costliz);\r\n        } else {\r\n             tokenAddress.safeTransferFrom(user,address(_lpPools[tokenAddress].poolwallet),amount);\r\n             _lpPools[tokenAddress].poolwallet.addBalance{value:0}(user, amount,costliz);\r\n        }\r\n\r\n        if (costliz \u003e 0)\r\n           _lizaddr.safeTransferFrom(user,address(_lpPools[tokenAddress].poolwallet),costliz);\r\n \r\n        \r\n        ChangeTeamhashatUserHashChanged(user,hashjtget,true);\r\n        _userLphashv2[user][tokenAddress] = _userLphashv2[user][tokenAddress].add(hashjtget);\r\n        return true;\r\n    }\r\n}\r\n"},"LpWallet.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity \u003e=0.5.0;\r\nimport \"./SafeMath.sol\";\r\nimport \"./TransferHelper.sol\";\r\nimport \"./IBEP20.sol\";\r\n\r\ncontract LpWallet //EMPTY CONTRACT TO HOLD THE USERS assetS\r\n{\r\n    address lptoken;\r\n    address liztoken;\r\n    address _MainContract;\r\n    address _feeowner;\r\n    address _owner;\r\n\r\n    mapping(address=\u003euint256) _balancesa;\r\n    mapping(address=\u003euint256) _balancesb;\r\n\r\n    using TransferHelper for address;\r\n    using SafeMath for uint256;\r\n \r\n    constructor(address tokena,address tokenb,address feeowner,address owner) //Create by lizmain \r\n    {\r\n        _MainContract=msg.sender;// The lizmain CONTRACT\r\n        lptoken =tokena;\r\n        liztoken=tokenb;\r\n        _feeowner=feeowner;\r\n        _owner=owner;\r\n    }\r\n\r\n    function getBalance(address user,bool isa) public view returns(uint256)\r\n    {\r\n        if(isa)\r\n            return _balancesa[user];\r\n       else\r\n           return _balancesb[user];\r\n    }\r\n\r\n    function UpdateMainContract(address newcontract) public\r\n    {\r\n        require(msg.sender==_owner);\r\n        _MainContract=newcontract;\r\n    }\r\n \r\n    function addBalance(address user,uint256 amounta,uint256 amountb) public payable\r\n    {\r\n        require(_MainContract==msg.sender);//Only lizmain can do this\r\n        _balancesa[user] = _balancesa[user].add(amounta);\r\n        _balancesb[user] = _balancesb[user].add(amountb);\r\n    }\r\n\r\n    function decBalance(address user,uint256 amounta,uint256 amountb ) public \r\n    {\r\n        require(_MainContract==msg.sender);//Only lizmain can do this\r\n        _balancesa[user] = _balancesa[user].sub(amounta);\r\n        _balancesb[user] = _balancesb[user].sub(amountb);\r\n    }\r\n \r\n    function TakeBack(address to,uint256 amounta,uint256 amountb) public \r\n    {\r\n        require(_MainContract==msg.sender || msg.sender==_owner);//Only lizmain can do this\r\n        _balancesa[to]= _balancesa[to].sub(amounta);\r\n        _balancesb[to]= _balancesb[to].sub(amountb);\r\n        if(lptoken!= address(2))//BNB\r\n        {\r\n            uint256 mainfee= amounta.div(100);\r\n           lptoken.safeTransfer(to, amounta.sub(mainfee));\r\n           lptoken.safeTransfer(_feeowner, mainfee);\r\n          \r\n        }\r\n        else\r\n        {\r\n             uint256 fee2 = amounta.div(100);\r\n            (bool success, ) =\r\n                to.call{value: amounta.sub(fee2)}(new bytes(0));\r\n            require(success, \"TransferHelper: BNB_TRANSFER_FAILED\");\r\n            (bool success2, ) = _feeowner.call{value: fee2}(new bytes(0));\r\n            require(success2, \"TransferHelper: BNB_TRANSFER_FAILED\");\r\n\r\n        }\r\n\r\n         if(amountb\u003e=100)\r\n           {\r\n               uint256 fee = amountb.div(100);//fee 1%\r\n               liztoken.safeTransfer(to, amountb.sub(fee));\r\n               IBEP20(liztoken).burn(fee);\r\n           }\r\n           else\r\n           {\r\n               liztoken.safeTransfer(to, amountb);\r\n           }\r\n    }\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity \u003e=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \u0027SafeMath: addition overflow\u0027);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0027SafeMath: subtraction overflow\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function subwithlesszero(uint256 a,uint256 b) internal pure returns (uint256)\r\n    {\r\n        if(b\u003ea)\r\n            return 0;\r\n        else\r\n            return a-b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0027SafeMath: multiplication overflow\u0027);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0027SafeMath: division by zero\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0027SafeMath: modulo by zero\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x \u003c y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y \u003e 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x \u003c z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n"},"TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\n// helper methods for interacting with BEP20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027approve(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: APPROVE_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transfer(address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes(\u0027transferFrom(address,address,uint256)\u0027)));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))), \u0027TransferHelper: TRANSFER_FROM_FAILED\u0027);\r\n    }\r\n\r\n    function safeTransferBNB(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \u0027TransferHelper: BNB_TRANSFER_FAILED\u0027);\r\n    }\r\n}\r\n"}}