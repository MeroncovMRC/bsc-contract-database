
// File: contracts/Lock.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

import "../interface/IERC20.sol";


contract Lock {
    address public constant blackHole = 0x0000000000000000000000000000000000000001;
    IERC20 public esct ;//= IERC20(address(0xd0bedf54Bb3a002024a0F131363019ADf8e19428));
    uint public locktime;
    mapping(address=>uint) public balances;
    mapping(address=>uint) public totalLocks;
    address public owner;
    uint public totalLock;

    uint public constant UNLOCK_GAP = 30 days;
    
    constructor(address esctAddress){
        locktime = block.timestamp;
        owner = msg.sender;
        esct = IERC20(esctAddress);
    }
    
    function lock(uint amount) external{
        uint beforeBalance = esct.balanceOf(address(this));
        require(esct.transferFrom(msg.sender, address(this), amount));
        uint nowBalance = esct.balanceOf(address(this));
        
        require(nowBalance > beforeBalance, "balance error");
        
        uint realAmount = (nowBalance-beforeBalance);
        totalLock += realAmount;
        balances[msg.sender] += realAmount;
        totalLocks[msg.sender] += realAmount;
    }
    
    function withdraw() external {
        uint amount = canUnlock(msg.sender);
        require(amount>0, "amount must more than 0");

        require(amount<=balances[msg.sender], "balance error");
        
        balances[msg.sender] -= amount;
        
        totalLock -= amount;
        require(esct.transfer(msg.sender, amount));
    }

    function nextUnlockTime() public view returns(uint){
        uint unlockNum = (block.timestamp - locktime)/UNLOCK_GAP;
        if(unlockNum>=20)return 0;

        return (unlockNum+1)*UNLOCK_GAP+locktime;
    }

    function totalUnlockTime() public view returns(uint){
        return (20)*UNLOCK_GAP+locktime;
    }

    function canUnlock(address user) public view returns(uint){
        uint unlockNum = (block.timestamp - locktime)/UNLOCK_GAP;

        uint amount = balances[user];
        uint total = totalLocks[user];

        uint canlock = (total * 50 / 1000)*unlockNum;
        if(unlockNum>=20){ //over total month, can unlock all
            canlock = total;
        }

        if(canlock<(total-amount)) {return 0;}
        return canlock - (total - amount);
    }

    function bounds() public view returns (uint){
        uint amount = esct.balanceOf(address(this));
        return amount - totalLock;
    }

    function destory() external { //destory bounds
        require(msg.sender == owner);
        uint amount = esct.balanceOf(address(this));
        require(amount-totalLock>0);
        
        esct.transfer(blackHole, amount-totalLock);
    }

    function setOwner(address _owner) external {
        require(msg.sender == owner, "auth");
        owner = _owner;
    }
    
}

// File: interface/IERC20.sol
//SPDX-License-Identifier: Unlicensed
pragma solidity >=0.7.3;

interface IERC20 {

    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
