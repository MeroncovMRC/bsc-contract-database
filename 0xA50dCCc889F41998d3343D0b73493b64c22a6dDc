{"IERC20.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\ninterface IERC20 {\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IStaking.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\n\ninterface IStaking {\n    function stake( uint _amount, address _recipient ) external returns ( bool );\n    function claim( address _recipient ) external;\n    function unstake( uint _amount, address _recipient ) external returns ( bool );\n    function index() external view returns ( uint );\n}\n"},"StakingHelper.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.7.5;\n\nimport \u0027./IERC20.sol\u0027;\nimport \u0027./IStaking.sol\u0027;\n\n\ncontract StakingHelper {\n\n    address public immutable staking;\n    address public immutable OHM;\n\n    constructor ( address _staking, address _OHM ) {\n        require( _staking != address(0) );\n        staking = _staking;\n        require( _OHM != address(0) );\n        OHM = _OHM;\n    }\n\n    function stake( uint _amount ) external {\n        IERC20( OHM ).transferFrom( msg.sender, address(this), _amount );\n        IERC20( OHM ).approve( staking, _amount );\n        IStaking( staking ).stake( _amount, msg.sender );\n        IStaking( staking ).claim( msg.sender );\n    }\n}"}}